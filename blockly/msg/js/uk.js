// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.uk');

goog.require('Blockly.Msg');

/** @export */ Blockly.Msg.ADD_COMMENT = "Додати коментар";
/** @export */ Blockly.Msg.AEROBOT_BACKWARD = "Backward";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_CENTER = "Center";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_DISTSENS_TITLE = "DistSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_DISTSENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_FORWARD = "Forward";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_HELPURL = "http://affordableeducationrobot.github.io/v1.0/";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LIGHTSENS_TITLE = "LightSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LIGHTSENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LINESENS_TITLE = "LineSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LINESENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_MOVE_TITLE = "Move";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_MOVE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_NONE = "None";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_TITLE = "Rotate";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_SETLED_TITLE = "SetLedColor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_SETLED_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_STOP = "Stop";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_TURN_LEFT = "TurnLeft";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_TURN_RIGHT = "TurnRight";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_WARNING = "Need to install AERobot library";  // untranslated
/** @export */ Blockly.Msg.BLUE = "Blue";  // untranslated
/** @export */ Blockly.Msg.BLYNK_AUTH = "Auth";  // untranslated
/** @export */ Blockly.Msg.BLYNK_CONNECT_TITLE = "Connectted";  // untranslated
/** @export */ Blockly.Msg.BLYNK_CONNECT_TOOLTIP = "Check connection";  // untranslated
/** @export */ Blockly.Msg.BLYNK_EMAIL_TITLE = "Send Email";  // untranslated
/** @export */ Blockly.Msg.BLYNK_EMAIL_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.BLYNK_ETHERNET_BEGIN_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_HELPURL = "https://github.com/blynkkk/blynk-library";  // untranslated
/** @export */ Blockly.Msg.BLYNK_MERGE_PARAM_TITLE = "Get Merge Parameter";  // untranslated
/** @export */ Blockly.Msg.BLYNK_MERGE_PARAM_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_NOTIFY_TITLE = "Push Notify";  // untranslated
/** @export */ Blockly.Msg.BLYNK_NOTIFY_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_PARAM_TITLE = "Get Parameter";  // untranslated
/** @export */ Blockly.Msg.BLYNK_PARAM_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_TWEET_TITLE = "Tweet";  // untranslated
/** @export */ Blockly.Msg.BLYNK_TWEET_TOOPTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_VIRTUAL_WRITE_TITLE = "Send Virtual Value";  // untranslated
/** @export */ Blockly.Msg.BLYNK_VIRTUAL_WRITE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_WRITE_TITLE = "Get Virtual Action";  // untranslated
/** @export */ Blockly.Msg.BLYNK_WRITE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = "Can't delete the variable '%1' because it's part of the definition of the function '%2'";  // untranslated
/** @export */ Blockly.Msg.CHANGE = "Change";  // untranslated
/** @export */ Blockly.Msg.CHANGE_VALUE_TITLE = "Змінити значення:";
/** @export */ Blockly.Msg.CLEAN_UP = "Вирівняти блоки";
/** @export */ Blockly.Msg.COL = "Col";  // untranslated
/** @export */ Blockly.Msg.COLLAPSE_ALL = "Згорнути блоки";
/** @export */ Blockly.Msg.COLLAPSE_BLOCK = "Згорнути блок";
/** @export */ Blockly.Msg.COLOR = "Color";  // untranslated
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR1 = "колір 1";
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR2 = "колір 2";
/** @export */ Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";
/** @export */ Blockly.Msg.COLOUR_BLEND_RATIO = "співвідношення";
/** @export */ Blockly.Msg.COLOUR_BLEND_TITLE = "змішати";
/** @export */ Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Змішує два кольори разом у вказаному співвідношені (0.0 - 1.0).";
/** @export */ Blockly.Msg.COLOUR_PICKER_HELPURL = "https://uk.wikipedia.org/wiki/Колір";
/** @export */ Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Вибрати колір з палітри.";
/** @export */ Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
/** @export */ Blockly.Msg.COLOUR_RANDOM_TITLE = "випадковий колір";
/** @export */ Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Вибрати колір навмання.";
/** @export */ Blockly.Msg.COLOUR_RGB_BLUE = "синій";
/** @export */ Blockly.Msg.COLOUR_RGB_GREEN = "зелений";
/** @export */ Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";
/** @export */ Blockly.Msg.COLOUR_RGB_RED = "червоний";
/** @export */ Blockly.Msg.COLOUR_RGB_TITLE = "колір з";
/** @export */ Blockly.Msg.COLOUR_RGB_TOOLTIP = "Створити колір зі вказаними рівнями червоного, зеленого та синього. Усі значення мають бути від 0 до 100.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "перервати цикл";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "продовжити з наступної ітерації циклу";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Перервати виконання циклу.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Пропустити залишок цього циклу і перейти до виконання наступної ітерації.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Попередження: цей блок може бути використаний тільки в межах циклу.";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://github.com/google/blockly/wiki/Loops#for-each";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TITLE = "для кожного елемента %1 у списку %2";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Для кожного елемента в списку змінна '%1' отримує значення елемента, а потім виконуються певні дії.";
/** @export */ Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_FOR_TITLE = "рахувати з %1 від %2 до %3 через %4";
/** @export */ Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Наявна змінна \"%1\" набуває значень від початкового до кінцевого, враховуючи заданий інтервал, і виконуються вказані блоки.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Додайте умову до блока 'якщо'.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Додати остаточну, всеосяжну умову до блоку 'якщо'.";
/** @export */ Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Додайте, вилучіть або змініть порядок секцій, щоб переналаштувати цей блок 'якщо'.";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSE = "інакше";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "інакше якщо";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_IF = "якщо";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Якщо значення істинне, то виконати певні дії.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Якщо значення істинне, то виконується перший блок операторів. В іншому випадку виконується другий блок операторів.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Якщо перше значення істинне, то виконується перший блок операторів. В іншому випадку, якщо друге значення істина, то виконується другий блок операторів.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Якщо перше значення істинне, то виконується перший блок операторів. В іншому випадку, якщо друге значення істинне, то виконується другий блок операторів. Якщо жодне із значень не є істинним, то виконується останній блок операторів.";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://uk.wikipedia.org/wiki/Цикл_(програмування)#.D0.A6.D0.B8.D0.BA.D0.BB_.D0.B7_.D0.BB.D1.96.D1.87.D0.B8.D0.BB.D1.8C.D0.BD.D0.B8.D0.BA.D0.BE.D0.BC";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "виконати";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TITLE = "повторити %1 разів";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Виконати певні дії декілька разів.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "повторювати, доки не";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "повторювати поки";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Поки значення хибне, виконувати певні дії.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Поки значення істинне, виконувати певні дії.";
/** @export */ Blockly.Msg.DATA_LENGTH = "Data Length";  // untranslated
/** @export */ Blockly.Msg.DATA_TYPE = "DataType";  // untranslated
/** @export */ Blockly.Msg.DELETE_ALL_BLOCKS = "Вилучити всі блоки %1?";
/** @export */ Blockly.Msg.DELETE_BLOCK = "Видалити блок";
/** @export */ Blockly.Msg.DELETE_VARIABLE = "Вилучити змінну '%1'";
/** @export */ Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "Вилучити %1 використання змінної '%2'?";
/** @export */ Blockly.Msg.DELETE_X_BLOCKS = "Видалити %1 блоків";
/** @export */ Blockly.Msg.DEVICE_ID = "DeviceID";  // untranslated
/** @export */ Blockly.Msg.DHT_HELPURL = "https://github.com/adafruit/DHT-sensor-library";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_C = "Temperature C";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_F = "Temperature F";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_H = "Humidity %";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_SENSOR = "Sensor";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_TOOLTIP = "The DHT sensors are made of two parts; a capacitive humidity sensor and a thermistor.";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_TYPE = "Content";  // untranslated
/** @export */ Blockly.Msg.DHT_WARNING = "Need to install the (adafruit) DHT-sensor-library";  // untranslated
/** @export */ Blockly.Msg.DIRECTION = "Direction";  // untranslated
/** @export */ Blockly.Msg.DISABLE_BLOCK = "Вимкнути блок";
/** @export */ Blockly.Msg.DOUBLE = "Double";  // untranslated
/** @export */ Blockly.Msg.DUPLICATE_BLOCK = "Дублювати";
/** @export */ Blockly.Msg.ELEVATION = "Elevation";  // untranslated
/** @export */ Blockly.Msg.EMAIL_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.EMAIL_BODY = "Body";  // untranslated
/** @export */ Blockly.Msg.EMAIL_TITLE = "Title";  // untranslated
/** @export */ Blockly.Msg.ENABLE_BLOCK = "Увімкнути блок";
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Clinet.availalbe";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is; the amount of data that has been written to the client by the server it is connected to).";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_DHCP_TITLE = "Begin (DHCP)";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup; the Ethernet shield will automatically obtain an IP address.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data; followed by a carriage return and newline; to the server a client is connected to. Prints numbers as a sequence of digits; each an ASCII character (e.g. the number 123 is sent as the three characters '1'; '2'; '3').";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits; each an ASCII character (e.g. the number 123 is sent as the three characters '1'; '2'; '3').";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Clinet.Connected";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected; false if not.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_TITLE = "Clinet.Connect";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_TITLE = "localIP";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Retruns the IP address of the Ethernet shield";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_DATA = "Data";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_TITLE = "Client.Read";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_TITLE = "Client.Stop";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Disconnect from the server.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_1 = "Eternet";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_2 = "Eternet2";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_V2 = "Eternet_v2";  // untranslated
/** @export */ Blockly.Msg.EXPAND_ALL = "Розгорнути блоки";
/** @export */ Blockly.Msg.EXPAND_BLOCK = "Розгорнути блок";
/** @export */ Blockly.Msg.EXTERNAL_INPUTS = "Зовнішні входи";
/** @export */ Blockly.Msg.FALLING = "Falling";  // untranslated
/** @export */ Blockly.Msg.GREEN = "Green";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Button";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_TITLE = "Button";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_TOOLTIP = "Basic digital input";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Buzzer";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_TITLE = "Piezo Buzzer";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_TOOLTIP = "Emit a tone when the output is high";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_SEND_TITLE = "Send";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_SEND_TOOLTIP = "Send Data.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_TITLE = "Infrared Emitter";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TITLE = "Check Data";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_DATA_TITLE = "Received Data";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_DATA_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_TOOLTIP = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TITLE = "Receive";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_TITLE = "Infrared Receiver";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_TITLE = "LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_TOOLTIP = "LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Light_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_TITLE = "Light Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_TOOLTIP = "output Low Value in bright light. High Value is darkness.";  // untranslated
/** @export */ Blockly.Msg.GROVE_PIN = "PIN#";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Relay";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_TITLE = "Relay";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_TOOLTIP = "capable of switching a much higher voltages and currents. The maximum voltage and current that can be controlled by this module upto 250V at 10 amps.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen; and specifies the dimensions (width and height) of the display.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_WARNING = "Need to install the Grove_LCD_RGB_Backlight library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_CLEAR_TITLE = "Clear";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LCD_RGB_Backlight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right; the default.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_PRINT_TITLE = "Print";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_TITLE = "LCD RGB";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Rotary_Angle_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_TITLE = "Rotary Angle";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_TOOLTIP = "Analog output between 0 and Vcc";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Sound_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_TITLE = "Sound Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_TOOLTIP = "Detect the sound strength of the environment";  // untranslated
/** @export */ Blockly.Msg.GROVE_STAT = "Stat";  // untranslated
/** @export */ Blockly.Msg.GROVE_TEMP_SENSOR_TITLE = "Temporature Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_TEMP_SENSOR_TOOLTIP = "return number of ambient temperature in ℃";  // untranslated
/** @export */ Blockly.Msg.GROVE_TILT_SWITCH_TITLE = "Tilt Switch";  // untranslated
/** @export */ Blockly.Msg.GROVE_TILT_SWITCH_TOOLTIP = "When the switch is level it is open; and when tilted; the switch closes.";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Touch_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_TITLE = "Touch";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_TOOLTIP = "Basic digital input";  // untranslated
/** @export */ Blockly.Msg.HELP = "Довідка";
/** @export */ Blockly.Msg.I2C_MATRIX_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library.";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_CLEAR = "Clear";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DIAMETER = "Diamater";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DOTS = "Dots";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWCIRCLE = "DrawCircle";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWCOLON = "drawColon";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWLINE = "DrawLine";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWPIXEL = "DrawPixel";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWRECT = "DrawRect";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_FILLRECT = "FillRect";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_LED_OFF = "Led off";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_LED_ON = "Led on";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_NUM = "Num";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_PRINT = "Print";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETCURSOR = "Cursor";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETROTATION = "Rotation";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTCOLOR = "TextColor";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTSIZE = "TextSize";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTWRAP = "TextWrap";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_TEXT = "text";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_TYPE = "Type";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WRITEDIGITNUM = "writeDigitNum";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WRITEDISPLAY = "WriteDisplay";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X = "x";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X0 = "x0";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X1 = "x1";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y = "y";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y0 = "y0";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y1 = "y1";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BOOLEAN_FALSE = "hidden";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BOOLEAN_TRUE = "display";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_COLON = "Colon";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_DOTS = "Colon";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_NUM = "Number";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_PRINT = "Print";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_TITLE = "7 Segment";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WARNING = "Need to Begin blocks";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WRITEDIGITNUM = "WriteDigitNum";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WRITEDISPLAY = "WriteDisplay";  // untranslated
/** @export */ Blockly.Msg.IFTTT_EVENT = "Event";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_TITLE = "Create GET Request URL";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_TOOLTIP = "Create GET Request URL of IFTTT.";  // untranslated
/** @export */ Blockly.Msg.IFTTT_KEY = "Key";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE1 = "Value1";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE2 = "Value2";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE3 = "Value3";  // untranslated
/** @export */ Blockly.Msg.INDEX = "Index";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_APPENDTEXT = "add setup()";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_HELPURL = "http://www.arduino.cc/en/Reference/Setup";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "The setup() function is called when a sketch starts.";  // untranslated
/** @export */ Blockly.Msg.INLINE_INPUTS = "Вбудовані входи";
/** @export */ Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "AnalogRead PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "AnalogWrite PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "DigitalRead PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "DigitalWrite PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "Stat";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";  // untranslated
/** @export */ Blockly.Msg.INOUT_HIGH = "HIGH";  // untranslated
/** @export */ Blockly.Msg.INOUT_LOW = "LOW";  // untranslated
/** @export */ Blockly.Msg.INOUT_OFF = "OFF";  // untranslated
/** @export */ Blockly.Msg.INOUT_ON = "ON";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin#";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "tone Pin#";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";  // untranslated
/** @export */ Blockly.Msg.INTEGER = "Integer";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_HELPURL = "https://www.arduino.cc/en/Reference/AttachInterrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_TITLE = "Attach Interrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_TOOLTIP = "The first parameter to attachInterrupt is an interrupt number.";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_HELPURL = "https://www.arduino.cc/en/Reference/DetachInterrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_TITLE = "Detach Interrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_TOOLTIP = "Turns off the given interrupt.";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_HELPURL = "https://www.arduino.cc/en/Reference/Interrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_HELPURL = "https://www.arduino.cc/en/Reference/NoInterrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_TITLE = "noInterrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_TOOLTIP = "Disables interrupts (you can re-enable them with interrupts()).";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_TITLE = "interrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_TOOLTIP = "Re-enables interrupts (after they've been disabled by noInterrupts()). ";  // untranslated
/** @export */ Blockly.Msg.IOS_CANCEL = "Скасувати";
/** @export */ Blockly.Msg.IOS_ERROR = "Помилка";
/** @export */ Blockly.Msg.IOS_OK = "Готово";
/** @export */ Blockly.Msg.IOS_PROCEDURES_ADD_INPUT = "+ Add Input";  // untranslated
/** @export */ Blockly.Msg.IOS_PROCEDURES_ALLOW_STATEMENTS = "Allow statements";  // untranslated
/** @export */ Blockly.Msg.IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR = "This function has duplicate inputs.";  // untranslated
/** @export */ Blockly.Msg.IOS_PROCEDURES_INPUTS = "INPUTS";  // untranslated
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_BUTTON = "Додати";
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_VARIABLE = "+ Додати змінну";
/** @export */ Blockly.Msg.IOS_VARIABLES_DELETE_BUTTON = "Видалити";
/** @export */ Blockly.Msg.IOS_VARIABLES_EMPTY_NAME_ERROR = "You can't use an empty variable name.";  // untranslated
/** @export */ Blockly.Msg.IOS_VARIABLES_RENAME_BUTTON = "Перейменувати";
/** @export */ Blockly.Msg.IOS_VARIABLES_VARIABLE_NAME = "Назва змінної";
/** @export */ Blockly.Msg.IP_ADDRESS = "IP Address";  // untranslated
/** @export */ Blockly.Msg.LATITUDE = "Latitude";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalAutoscroll";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalBegin";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_TITLE = "begin";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen; and specifies the dimensions (width and height) of the display.";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalClear";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_TITLE = "Clear";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D4 = "D4";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D5 = "D5";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D6 = "D6";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D7 = "D7";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_ENABLE = "enable";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_RS = "rs";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_RW = "rw";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_TITLE = "Pin#";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_TOOLTIP = "Creates a variable of type LiquidCrystal.";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalLeftToRight";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right; the default.";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalNoAutoscroll";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalPrint";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_TITLE = "Print";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalRightToLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
/** @export */ Blockly.Msg.LCD_SETCURSOR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalSetCursor";  // untranslated
/** @export */ Blockly.Msg.LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
/** @export */ Blockly.Msg.LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "створити порожній список";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Повертає список, довжиною 0, що не містить записів даних";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "список";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Додайте, вилучіть або змініть порядок секцій для переналаштування блока списку.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "створити список з";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Додати елемент до списку.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Створює список з будь-якою кількістю елементів.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FIRST = "перший";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# з кінця";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET = "отримати";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "отримати і вилучити";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_LAST = "останній";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_RANDOM = "випадковий";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_REMOVE = "вилучити";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TAIL = "-ий.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Повертає перший елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Повертає елемент у заданій позиції у списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Повертає останній елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Повертає випадковий елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Видаляє і повертає перший елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Видаляє і повертає елемент у заданій позиції у списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Видаляє і повертає останній елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Видаляє і повертає випадковий елемент списоку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Вилучає перший елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Вилучає зі списку елемент у вказаній позиції.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Вилучає останній елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Вилучає випадковий елемент списку.";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "до # з кінця";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "до #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "до останнього";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "отримати вкладений список з першого";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "отримати вкладений список від # з кінця";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "отримати вкладений список з #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "символу.";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Створює копію вказаної частини списку.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 - це останній елемент.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 - це перший елемент.";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_FIRST = "знайти перше входження елемента";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
/** @export */ Blockly.Msg.LISTS_INDEX_OF_LAST = "знайти останнє входження елемента";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Повертає індекс першого/останнього входження елемента у списку. Повертає %1, якщо елемент не знайдено.";
/** @export */ Blockly.Msg.LISTS_INLIST = "у списку";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 є порожнім";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Повертає істину, якщо список порожній.";
/** @export */ Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
/** @export */ Blockly.Msg.LISTS_LENGTH_TITLE = "довжина %1";
/** @export */ Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Повертає довжину списку.";
/** @export */ Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
/** @export */ Blockly.Msg.LISTS_REPEAT_TITLE = "створити список з елемента %1 повтореного %2 разів";
/** @export */ Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Створює список, що складається з заданого значення повтореного задану кількість разів.";
/** @export */ Blockly.Msg.LISTS_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";  // untranslated
/** @export */ Blockly.Msg.LISTS_REVERSE_MESSAGE0 = "reverse %1";  // untranslated
/** @export */ Blockly.Msg.LISTS_REVERSE_TOOLTIP = "Reverse a copy of a list.";  // untranslated
/** @export */ Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "як";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INSERT = "вставити в";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_SET = "встановити";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Вставляє елемент на початок списку.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Вставка елемента у вказану позицію списку.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Додає елемент у кінці списку.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Випадковим чином вставляє елемент у список.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Задає перший елемент списку.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Задає елемент списку у вказаній позиції.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Задає останній елемент списку.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Задає випадковий елемент у списку.";
/** @export */ Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "за зростанням";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "за спаданням";
/** @export */ Blockly.Msg.LISTS_SORT_TITLE = "сортувати %3 %1 %2";
/** @export */ Blockly.Msg.LISTS_SORT_TOOLTIP = "Сортувати копію списку.";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "за абеткою, ігноруючи регістр";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "як числа";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_TEXT = "за абеткою";
/** @export */ Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";  // untranslated
/** @export */ Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "зробити з тексту список";
/** @export */ Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "зробити зі списку текст";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Злити список текстів у єдиний текст, відокремивши розділювачами.";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Поділити текст на список текстів, розриваючи на кожному розділювачі.";
/** @export */ Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "з розділювачем";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_FALSE = "хибність";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Повертає значення істина або хибність.";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TRUE = "істина";
/** @export */ Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://uk.wikipedia.org/wiki/Нерівність";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Повертає істину, якщо обидва входи рівні один одному.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Повертає істину, якщо перше вхідне значення більше, ніж друге.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Повертає істину, якщо перше вхідне значення більше або дорівнює другому.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Повертає істину, якщо перше вхідне значення менше, ніж друге.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Повертає істину, якщо перше вхідне значення менше або дорівнює другому.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Повертає істину, якщо обидва входи не дорівнюють один одному.";
/** @export */ Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
/** @export */ Blockly.Msg.LOGIC_NEGATE_TITLE = "не %1";
/** @export */ Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Повертає істину, якщо вхідне значення хибне. Повертає хибність, якщо вхідне значення істинне.";
/** @export */ Blockly.Msg.LOGIC_NULL = "ніщо";
/** @export */ Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";
/** @export */ Blockly.Msg.LOGIC_NULL_TOOLTIP = "Повертає ніщо.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_AND = "та";
/** @export */ Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
/** @export */ Blockly.Msg.LOGIC_OPERATION_OR = "або";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Повертає істину, якщо обидва входи істинні.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Повертає істину, якщо принаймні один з входів істинний.";
/** @export */ Blockly.Msg.LOGIC_TERNARY_CONDITION = "тест";
/** @export */ Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "якщо хибність";
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "якщо істина";
/** @export */ Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Перевіряє умову в 'тест'. Якщо умова істинна, то повертає  значення 'якщо істина'; в іншому випадку повертає значення 'якщо хибність'.";
/** @export */ Blockly.Msg.LONGITUDE = "Longitude";  // untranslated
/** @export */ Blockly.Msg.LOW = "Low";  // untranslated
/** @export */ Blockly.Msg.M2X_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.M2X_BEGIN_TOOLTIP = "Set Config.";  // untranslated
/** @export */ Blockly.Msg.M2X_CUSTOM_LIST_VALUE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_DATE0_TITLE = "Start";  // untranslated
/** @export */ Blockly.Msg.M2X_DATE1_TITLE = "End";  // untranslated
/** @export */ Blockly.Msg.M2X_DELETE_VALUES_TITLE = "Delete Value";  // untranslated
/** @export */ Blockly.Msg.M2X_DELETE_VALUES_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_HELPURL = "https://m2x.att.com/developer/tutorials/arduino";  // untranslated
/** @export */ Blockly.Msg.M2X_KEY = "Access Key";  // untranslated
/** @export */ Blockly.Msg.M2X_LIST_VALUE_TITLE = "Get DataList";  // untranslated
/** @export */ Blockly.Msg.M2X_LIST_VALUE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_LOCATION_NAME = "Location name";  // untranslated
/** @export */ Blockly.Msg.M2X_READ_LOCATION_TITLE = "Read Location";  // untranslated
/** @export */ Blockly.Msg.M2X_READ_LOCATION_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_STREAM_NAME = "Stream Name";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_LOCATION_TITLE = "Update Location";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_LOCATION_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_VALUE_TITLE = "Update";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_VALUE_TOOLTIP = "Update Data to M2X";  // untranslated
/** @export */ Blockly.Msg.MAC_ADDRESS = "Mac Address";  // untranslated
/** @export */ Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
/** @export */ Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://uk.wikipedia.org/wiki/Арифметика";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Повертає суму двох чисел.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Повертає частку двох чисел.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Повертає різницю двох чисел.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Повертає добуток двох чисел.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Повертає перше число, піднесене до степеня, вираженого другим числом.";
/** @export */ Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE = "змінити %1 на %2";
/** @export */ Blockly.Msg.MATH_CHANGE_TOOLTIP = "Додати число до змінної '%1'.";
/** @export */ Blockly.Msg.MATH_CONSTANT_HELPURL = "https://uk.wikipedia.org/wiki/Математична_константа";
/** @export */ Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Повертає одну з поширених констант: π (3.141...), e (2.718...), φ (1,618...), sqrt(2) (1.414...), sqrt(½) (0.707...) або ∞ (нескінченність).";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TITLE = "обмежити %1 від %2 до %3";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Обмежує число вказаними межами (включно).";
/** @export */ Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
/** @export */ Blockly.Msg.MATH_IS_DIVISIBLE_BY = "ділиться на";
/** @export */ Blockly.Msg.MATH_IS_EVEN = "парне";
/** @export */ Blockly.Msg.MATH_IS_NEGATIVE = "від'ємне";
/** @export */ Blockly.Msg.MATH_IS_ODD = "непарне";
/** @export */ Blockly.Msg.MATH_IS_POSITIVE = "додатне";
/** @export */ Blockly.Msg.MATH_IS_PRIME = "просте";
/** @export */ Blockly.Msg.MATH_IS_TOOLTIP = "Перевіряє, чи число парне, непарне, просте, ціле, додатне, від'ємне або чи воно ділиться на певне число без остачі. Повертає істину або хибність.";
/** @export */ Blockly.Msg.MATH_IS_WHOLE = "ціле";
/** @export */ Blockly.Msg.MATH_MODULO_HELPURL = "https://uk.wikipedia.org/wiki/Ділення_з_остачею";
/** @export */ Blockly.Msg.MATH_MODULO_TITLE = "остача від %1 ÷ %2";
/** @export */ Blockly.Msg.MATH_MODULO_TOOLTIP = "Повертає остачу від ділення двох чисел.";
/** @export */ Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
/** @export */ Blockly.Msg.MATH_NUMBER_HELPURL = "https://uk.wikipedia.org/wiki/Число";
/** @export */ Blockly.Msg.MATH_NUMBER_TOOLTIP = "Число.";
/** @export */ Blockly.Msg.MATH_ONLIST_HELPURL = "http://www.mapleprimes.com/questions/100441-Applying-Function-To-List-Of-Numbers";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "середнє списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "максимум списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "медіана списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "мінімум списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "моди списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "випадковий елемент списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "стандартне відхилення списку";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "сума списку";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Повертає середнє (арифметичне) числових значень у списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Повертає найбільше число у списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Повертає медіану списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Повертає найменше число у списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Повертає перелік найпоширеніших елементів у списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Повертає випадковий елемент зі списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Повертає стандартне відхилення списку.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Повертає суму всіх чисел у списку.";
/** @export */ Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://uk.wikipedia.org/wiki/Генерація_випадкових_чисел";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "випадковий дріб";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Повертає випадковий дріб від 0,0 (включно) та 1.0 (не включно).";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://uk.wikipedia.org/wiki/Генерація_випадкових_чисел";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TITLE = "випадкове ціле число від %1 до %2";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Повертає випадкове ціле число між двома заданими межами включно.";
/** @export */ Blockly.Msg.MATH_ROUND_HELPURL = "https://uk.wikipedia.org/wiki/Округлення";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "округлити";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "округлити до меншого";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "округлити до більшого";
/** @export */ Blockly.Msg.MATH_ROUND_TOOLTIP = "Округлення числа до більшого або до меншого.";
/** @export */ Blockly.Msg.MATH_SINGLE_HELPURL = "https://uk.wikipedia.org/wiki/Квадратний_корінь";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "модуль";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ROOT = "квадратний корінь";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Повертає модуль числа.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Повертає e у степені.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Повертає натуральний логарифм числа.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Повертає десятковий логарифм числа.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Повертає протилежне число.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Повертає 10 у степені.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Повертає квадратний корінь з числа.";
/** @export */ Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_HELPURL = "https://uk.wikipedia.org/wiki/Тригонометричні_функції";
/** @export */ Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Повертає арккосинус числа.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Повертає арксинус числа.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Повертає арктангенс числа.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Повертає косинус кута в градусах (не в радіанах).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Повертає синус кута в градусах (не в радіанах).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Повертає тангенс кута в градусах (не в радіанах).";
/** @export */ Blockly.Msg.MODE = "Mode";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_TOOLTIP = "initialize the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_WARNING = "Need to install the Adafruit_MPR121 library.";  // untranslated
/** @export */ Blockly.Msg.MPR121_HELPURL = "https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/wiring#download-adafruit-mpr121";  // untranslated
/** @export */ Blockly.Msg.MPR121_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.MPR121_RELEASED_TITLE = "Released";  // untranslated
/** @export */ Blockly.Msg.MPR121_RELEASED_TOOLTIP = "relesed the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_RESET_TITLE = "Reset";  // untranslated
/** @export */ Blockly.Msg.MPR121_RESET_TOOLTIP = "Reset the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_TOUCHED_TITLE = "Touched";  // untranslated
/** @export */ Blockly.Msg.MPR121_TOUCHED_TOOLTIP = "touched the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_VALUE_TITLE = "Capacitance Value";  // untranslated
/** @export */ Blockly.Msg.MPR121_VALUE_TOOLTIP = "value of capacitance";  // untranslated
/** @export */ Blockly.Msg.MPR121_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_NUM = "LED Num";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_SETTING = "Init";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values; from 0;0;0 up to 255;255;255";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SHOW = "Show";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_WARNING = "Need to Begin Block.";  // untranslated
/** @export */ Blockly.Msg.NEW_VARIABLE = "Створити змінну...";
/** @export */ Blockly.Msg.NEW_VARIABLE_TITLE = "Нова назва змінної:";
/** @export */ Blockly.Msg.OFF = "Off";  // untranslated
/** @export */ Blockly.Msg.ON = "On";  // untranslated
/** @export */ Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "-ий.";
/** @export */ Blockly.Msg.PIN = "Pin";  // untranslated
/** @export */ Blockly.Msg.PORT = "Port";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "дозволити дії";
/** @export */ Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "з:";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://uk.wikipedia.org/wiki/Підпрограма";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Запустити користувацьку функцію \"%1\".";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://uk.wikipedia.org/wiki/Підпрограма";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Запустити користувацьку функцію \"%1\" і використати її вивід.";
/** @export */ Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "з:";
/** @export */ Blockly.Msg.PROCEDURES_CREATE_DO = "Створити \"%1\"";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Опишіть цю функцію...";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "блок тексту";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://uk.wikipedia.org/wiki/Підпрограма";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "щось зробити";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "до";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Створює функцію без виводу.";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://uk.wikipedia.org/wiki/Підпрограма";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "повернути";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Створює функцію з виводом.";
/** @export */ Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Увага: ця функція має дубльовані параметри.";
/** @export */ Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Підсвітити визначення функції";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Якщо значення істинне, то повернути друге значення.";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Попередження: цей блок може використовуватися лише в межах визначення функції.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "назва входу:";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Додати до функції вхідні параметри.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "входи";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Додайте, вилучіть або змініть порядок вхідних параметрів для цієї функції.";
/** @export */ Blockly.Msg.RED = "Red";  // untranslated
/** @export */ Blockly.Msg.REDO = "Повторити";
/** @export */ Blockly.Msg.REMOVE_COMMENT = "Видалити коментар";
/** @export */ Blockly.Msg.RENAME_VARIABLE = "Перейменувати змінну...";
/** @export */ Blockly.Msg.RENAME_VARIABLE_TITLE = "Перейменувати усі змінні \"%1\" до:";
/** @export */ Blockly.Msg.RGBLED_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_NUM = "LED Num";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_SETTING = "Init";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values; from 0;0;0 up to 255;255;255";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW = "Show";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_WARNING = "Need to Begin Block.";  // untranslated
/** @export */ Blockly.Msg.RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.RISING = "Rising";  // untranslated
/** @export */ Blockly.Msg.ROW = "Row";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial Available";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial Println";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial Print";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial Read";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";  // untranslated
/** @export */ Blockly.Msg.SERVER = "Server";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_TEXT1 = "Angle";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "Angle(uS)";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "Max";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "Min";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TEXT1 = "Attach Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TEXT1 = "Read Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TEXT2 = "Current Angle";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TEXT1 = "Write Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo; controlling the shaft accordingly.";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo; controlling the shaft accordingly.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_BACKWARD = "Backward";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_CONTROL = "Control";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_DRIVE_TITLE = "Drive";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_DRIVE_TOOLTIP = "All purpose drive call. Calls leftMotor and rightMotor directly.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFTTOOLTIP = "Disables the left motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFT_TITLE = "FastStop(left)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TITLE = "FastStop(right)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TOOLTIP = "Disables the right motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_TITLE = "FastStop";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_TOOLTIP = "Disables the motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FORWARD = "Forward";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_HELPURL = "http://www.seeedstudio.com/wiki/Shield_Bot_V1.2";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_LEFT_SPEED = "Left";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOTOR = "Motor";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOTOR_TOOLTIP = "Enables the right or left motor; negative for backwards; positive for forwards.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOVE_TITLE = "Move";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOVE_TOOLTIP = "Move Carbot.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_READ_SENSOR_TITLE = "Read Sensor";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_READ_SENSOR_TOOLTIP = "Reads any of the 5 light sensors on board.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_RIGHT_SPEED = "Right";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_LR_TOOLTIP = "Write a max speed to the left and right motor. Between 0(basically off) and 255(full speed)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TITLE = "MotorSpeed";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TOOLTIP = "Set max speed of two motors. Between 0(basically off) and 255(full speed)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOP = "Stop";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOPLEFT = "StopLeft";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOPRIGHT = "StopRight";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_WARNING = "Need to install Shield Bot 1.2 library";  // untranslated
/** @export */ Blockly.Msg.STRING = "String";  // untranslated
/** @export */ Blockly.Msg.TEXT = "Text";  // untranslated
/** @export */ Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
/** @export */ Blockly.Msg.TEXT_APPEND_TITLE = "до %1 додати текст %2";
/** @export */ Blockly.Msg.TEXT_APPEND_TOOLTIP = "Додати деякий текст до змінної '%1'.";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "до нижнього регістру";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "Великі Перші Букви";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "до ВЕРХНЬОГО регістру";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "В іншому випадку повертає копію тексту.";
/** @export */ Blockly.Msg.TEXT_CHARAT_FIRST = "отримати перший символ";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_END = "отримати символ # з кінця";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_START = "отримати символ #";
/** @export */ Blockly.Msg.TEXT_CHARAT_HELPURL = "http://publib.boulder.ibm.com/infocenter/lnxpcomp/v8v101/index.jsp?topic=%2Fcom.ibm.xlcpp8l.doc%2Flanguage%2Fref%2Farsubex.htm";
/** @export */ Blockly.Msg.TEXT_CHARAT_LAST = "отримати останній символ";
/** @export */ Blockly.Msg.TEXT_CHARAT_RANDOM = "отримати випадковий символ";
/** @export */ Blockly.Msg.TEXT_CHARAT_TAIL = "-ий.";
/** @export */ Blockly.Msg.TEXT_CHARAT_TITLE = "in text %1 %2";  // untranslated
/** @export */ Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Повертає символ у зазначеній позиції.";
/** @export */ Blockly.Msg.TEXT_COUNT_HELPURL = "https://github.com/google/blockly/wiki/Text#counting-substrings";  // untranslated
/** @export */ Blockly.Msg.TEXT_COUNT_MESSAGE0 = "count %1 in %2";  // untranslated
/** @export */ Blockly.Msg.TEXT_COUNT_TOOLTIP = "Count how many times some text occurs within some other text.";  // untranslated
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Додати елемент до тексту.";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "приєднати";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Додайте, вилучіть або змініть порядок секцій для переналаштування текстового блоку.";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "до символу # з кінця";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "до символу #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "до останнього символу";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "у тексті";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "отримати підрядок від першого символу";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "отримати підрядок від символу # з кінця";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "отримати підрядок від символу #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "-ого.";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Повертає заданий фрагмент тексту.";
/** @export */ Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "знайти перше входження тексту";
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "знайти останнє входження тексту";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TITLE = "у тексті %1 %2 %3.";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Повертає індекс першого/останнього входження першого тексту в другий. Повертає %1, якщо текст не знайдено.";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 є порожнім";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Повертає істину, якщо вказаний текст порожній.";
/** @export */ Blockly.Msg.TEXT_JOIN_HELPURL = "http://www.chemie.fu-berlin.de/chemnet/use/info/make/make_8.html";
/** @export */ Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "створити текст з";
/** @export */ Blockly.Msg.TEXT_JOIN_TOOLTIP = "Створити фрагмент тексту шляхом з'єднування будь-якого числа елементів.";
/** @export */ Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
/** @export */ Blockly.Msg.TEXT_LENGTH_TITLE = "довжина %1";
/** @export */ Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Повертає число символів (включно з пропусками) у даному тексті.";
/** @export */ Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_PRINT_TITLE = "друк %1";
/** @export */ Blockly.Msg.TEXT_PRINT_TOOLTIP = "Надрукувати заданий текст, числа або інші значення.";
/** @export */ Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Запитати у користувача число.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Запитати у користувача деякий текст.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "запит числа з повідомленням";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "запит тексту з повідомленням";
/** @export */ Blockly.Msg.TEXT_REPLACE_HELPURL = "https://github.com/google/blockly/wiki/Text#replacing-substrings";  // untranslated
/** @export */ Blockly.Msg.TEXT_REPLACE_MESSAGE0 = "replace %1 with %2 in %3";  // untranslated
/** @export */ Blockly.Msg.TEXT_REPLACE_TOOLTIP = "Replace all occurances of some text within some other text.";  // untranslated
/** @export */ Blockly.Msg.TEXT_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Text#reversing-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_REVERSE_MESSAGE0 = "reverse %1";  // untranslated
/** @export */ Blockly.Msg.TEXT_REVERSE_TOOLTIP = "Reverses the order of the characters in the text.";  // untranslated
/** @export */ Blockly.Msg.TEXT_TEXT_HELPURL = "https://uk.wikipedia.org/wiki/Рядок_(програмування)";
/** @export */ Blockly.Msg.TEXT_TEXT_TOOLTIP = "Символ, слово або рядок тексту.";
/** @export */ Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "вилучити крайні пропуски з обох кінців";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "вилучити пропуски з лівого боку";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "вилучити пропуски з правого боку";
/** @export */ Blockly.Msg.TEXT_TRIM_TOOLTIP = "Повертає копію тексту з вилученими пропусками з одного або обох кінців.";
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "delayMicroseconds";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_APPENDTEXT = "delay";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";  // untranslated
/** @export */ Blockly.Msg.TODAY = "Сьогодні";
/** @export */ Blockly.Msg.ULTRASONIC_DISTANCE_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_DISTANCE_TITLE = "Distance";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_TITLE = "MaxRange";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_ECHO = "Echo";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_RESET = "Reset";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TITLE = "Pin#";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TRIG = "Trig";  // untranslated
/** @export */ Blockly.Msg.UNDO = "Скасувати";
/** @export */ Blockly.Msg.URL = "URL";  // untranslated
/** @export */ Blockly.Msg.VALUE = "Value";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_DEFAULT_NAME = "елемент";
/** @export */ Blockly.Msg.VARIABLES_GET_CREATE_SET = "Створити 'встановити %1'";
/** @export */ Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_GET_TOOLTIP = "Повертає значення цієї змінної.";
/** @export */ Blockly.Msg.VARIABLES_SET = "встановити %1 до %2";
/** @export */ Blockly.Msg.VARIABLES_SET_CREATE_GET = "Створити 'отримати %1'";
/** @export */ Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_SET_TOOLTIP = "Задає цю змінну рівною входу.";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS = "Змінна з назвою '%1' вже існує.";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE = "A variable named '%1' already exists for another variable of type '%2'.";  // untranslated
/** @export */ Blockly.Msg.YELLOW = "Yellow";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
/** @export */ Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

/** @export */ Blockly.Msg.MATH_HUE = "230";
/** @export */ Blockly.Msg.VARIABLES_HUE = "330";
/** @export */ Blockly.Msg.SERVO_HUE = "215";
/** @export */ Blockly.Msg.GROVE_HUE = "215";
/** @export */ Blockly.Msg.RGBLED_HUE = "215";
/** @export */ Blockly.Msg.MPR121_HUE = "215";
/** @export */ Blockly.Msg.INITIALIZES_HUE = "230";
/** @export */ Blockly.Msg.BLYNK_HUE = "215";
/** @export */ Blockly.Msg.M2X_HUE = "215";
/** @export */ Blockly.Msg.IFTTT_HUE = "215";
/** @export */ Blockly.Msg.INTERRUPTS_HUE = "190";
/** @export */ Blockly.Msg.NEOPIXEL_HUE = "215";
/** @export */ Blockly.Msg.LOOPS_HUE = "120";
/** @export */ Blockly.Msg.SERIAL_HUE = "200";
/** @export */ Blockly.Msg.ROBOT_HUE = "215";
/** @export */ Blockly.Msg.ULTRASONIC_HUE = "215";
/** @export */ Blockly.Msg.TEXTS_HUE = "160";
/** @export */ Blockly.Msg.GROVE_OUTPUT_HUE = "215";
/** @export */ Blockly.Msg.PROCEDURES_HUE = "290";
/** @export */ Blockly.Msg.COLOUR_HUE = "20";
/** @export */ Blockly.Msg.OTHERS_HUE = "215";
/** @export */ Blockly.Msg.TIMES_HUE = "90";
/** @export */ Blockly.Msg.LISTS_HUE = "260";
/** @export */ Blockly.Msg.LOGIC_HUE = "210";
/** @export */ Blockly.Msg.I2C_MATRIX_HUE = "215";
/** @export */ Blockly.Msg.AEROBOT_HUE = "215";
/** @export */ Blockly.Msg.SHIELD_BOT_HUE = "215";
/** @export */ Blockly.Msg.ADAFRUIT_HUE = "215";
/** @export */ Blockly.Msg.I2C_SEVENSEG_HUE = "215";
/** @export */ Blockly.Msg.GROVE_INPUT_HUE = "215";
/** @export */ Blockly.Msg.ETHERNET_HUE = "215";
/** @export */ Blockly.Msg.INOUT_HUE = "230";