// This file was automatically generated.  Do not modify.

'use strict';

goog.provide('Blockly.Msg.es');

goog.require('Blockly.Msg');

/** @export */ Blockly.Msg.ADD_COMMENT = "Añadir comentario";
/** @export */ Blockly.Msg.AEROBOT_BACKWARD = "Backward";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_CENTER = "Center";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_DISTSENS_TITLE = "DistSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_DISTSENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_FORWARD = "Forward";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_HELPURL = "http://affordableeducationrobot.github.io/v1.0/";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LIGHTSENS_TITLE = "LightSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LIGHTSENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LINESENS_TITLE = "LineSensor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_LINESENS_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_MOVE_TITLE = "Move";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_MOVE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_NONE = "None";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_TITLE = "Rotate";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_ROTATE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_SETLED_TITLE = "SetLedColor";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_SETLED_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_STOP = "Stop";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_TURN_LEFT = "TurnLeft";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_TURN_RIGHT = "TurnRight";  // untranslated
/** @export */ Blockly.Msg.AEROBOT_WARNING = "Need to install AERobot library";  // untranslated
/** @export */ Blockly.Msg.BLUE = "Blue";  // untranslated
/** @export */ Blockly.Msg.BLYNK_AUTH = "Auth";  // untranslated
/** @export */ Blockly.Msg.BLYNK_CONNECT_TITLE = "Connectted";  // untranslated
/** @export */ Blockly.Msg.BLYNK_CONNECT_TOOLTIP = "Check connection";  // untranslated
/** @export */ Blockly.Msg.BLYNK_EMAIL_TITLE = "Send Email";  // untranslated
/** @export */ Blockly.Msg.BLYNK_EMAIL_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.BLYNK_ETHERNET_BEGIN_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_HELPURL = "https://github.com/blynkkk/blynk-library";  // untranslated
/** @export */ Blockly.Msg.BLYNK_MERGE_PARAM_TITLE = "Get Merge Parameter";  // untranslated
/** @export */ Blockly.Msg.BLYNK_MERGE_PARAM_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_NOTIFY_TITLE = "Push Notify";  // untranslated
/** @export */ Blockly.Msg.BLYNK_NOTIFY_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_PARAM_TITLE = "Get Parameter";  // untranslated
/** @export */ Blockly.Msg.BLYNK_PARAM_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_TWEET_TITLE = "Tweet";  // untranslated
/** @export */ Blockly.Msg.BLYNK_TWEET_TOOPTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_VIRTUAL_WRITE_TITLE = "Send Virtual Value";  // untranslated
/** @export */ Blockly.Msg.BLYNK_VIRTUAL_WRITE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.BLYNK_WRITE_TITLE = "Get Virtual Action";  // untranslated
/** @export */ Blockly.Msg.BLYNK_WRITE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.CANNOT_DELETE_VARIABLE_PROCEDURE = "No se puede eliminar la variable \"%1\" porque es parte de la definición de la función \"%2\"";
/** @export */ Blockly.Msg.CHANGE = "Change";  // untranslated
/** @export */ Blockly.Msg.CHANGE_VALUE_TITLE = "Cambiar el valor:";
/** @export */ Blockly.Msg.CLEAN_UP = "Limpiar los bloques";
/** @export */ Blockly.Msg.COL = "Col";  // untranslated
/** @export */ Blockly.Msg.COLLAPSE_ALL = "Contraer bloques";
/** @export */ Blockly.Msg.COLLAPSE_BLOCK = "Contraer bloque";
/** @export */ Blockly.Msg.COLOR = "Color";  // untranslated
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR1 = "color 1";
/** @export */ Blockly.Msg.COLOUR_BLEND_COLOUR2 = "color 2";
/** @export */ Blockly.Msg.COLOUR_BLEND_HELPURL = "http://meyerweb.com/eric/tools/color-blend/";  // untranslated
/** @export */ Blockly.Msg.COLOUR_BLEND_RATIO = "proporción";
/** @export */ Blockly.Msg.COLOUR_BLEND_TITLE = "combinar";
/** @export */ Blockly.Msg.COLOUR_BLEND_TOOLTIP = "Combina dos colores con una proporción determinada (0,0–1,0).";
/** @export */ Blockly.Msg.COLOUR_PICKER_HELPURL = "https://es.wikipedia.org/wiki/Color";
/** @export */ Blockly.Msg.COLOUR_PICKER_TOOLTIP = "Elige un color de la paleta.";
/** @export */ Blockly.Msg.COLOUR_RANDOM_HELPURL = "http://randomcolour.com";  // untranslated
/** @export */ Blockly.Msg.COLOUR_RANDOM_TITLE = "color aleatorio";
/** @export */ Blockly.Msg.COLOUR_RANDOM_TOOLTIP = "Elige un color al azar.";
/** @export */ Blockly.Msg.COLOUR_RGB_BLUE = "azul";
/** @export */ Blockly.Msg.COLOUR_RGB_GREEN = "verde";
/** @export */ Blockly.Msg.COLOUR_RGB_HELPURL = "http://www.december.com/html/spec/colorper.html";  // untranslated
/** @export */ Blockly.Msg.COLOUR_RGB_RED = "rojo";
/** @export */ Blockly.Msg.COLOUR_RGB_TITLE = "colorear con";
/** @export */ Blockly.Msg.COLOUR_RGB_TOOLTIP = "Crea un color con cantidades específicas de rojo, verde y azul. Todos los valores deben encontrarse entre 0 y 100.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_HELPURL = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK = "romper el bucle";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE = "continuar con la siguiente iteración del bucle";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK = "Romper el bucle que lo contiene.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE = "Saltar el resto de este bucle, y continuar con la siguiente iteración.";
/** @export */ Blockly.Msg.CONTROLS_FLOW_STATEMENTS_WARNING = "Atención: este bloque puede usarse solamente dentro de un bucle.";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_HELPURL = "https://es.wikipedia.org/wiki/Foreach";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TITLE = "para cada elemento %1 en la lista %2";
/** @export */ Blockly.Msg.CONTROLS_FOREACH_TOOLTIP = "Para cada elemento en una lista, establecer la variable '%1' al elemento y luego hacer algunas declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_FOR_HELPURL = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_FOR_TITLE = "contar con %1 desde %2 hasta %3 de a %4";
/** @export */ Blockly.Msg.CONTROLS_FOR_TOOLTIP = "Hacer que la variable \"%1\" tome los valores desde el número de inicio hasta el número final, contando con el intervalo especificado, y hacer los bloques especificados.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TOOLTIP = "Agregar una condición a este bloque.";
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TOOLTIP = "Agregar una condición general final a este bloque.";
/** @export */ Blockly.Msg.CONTROLS_IF_HELPURL = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TOOLTIP = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque.";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSE = "sino";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_ELSEIF = "sino si";
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_IF = "si";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_1 = "Si un valor es verdadero, entonces hacer algunas declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_2 = "Si un valor es verdadero, entonces hacer el primer bloque de declaraciones.  De lo contrario, hacer el segundo bloque de declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_3 = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_IF_TOOLTIP_4 = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones. Si ninguno de los valores son verdaderos, hacer el último bloque de declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_HELPURL = "https://es.wikipedia.org/wiki/Bucle_for";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_INPUT_DO = "hacer";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TITLE = "repetir %1 veces";
/** @export */ Blockly.Msg.CONTROLS_REPEAT_TOOLTIP = "Hacer algunas declaraciones varias veces.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_HELPURL = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_UNTIL = "repetir hasta";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_OPERATOR_WHILE = "repetir mientras";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL = "Mientras un valor sea falso, entonces hacer algunas declaraciones.";
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_TOOLTIP_WHILE = "Mientras un valor sea verdadero, entonces hacer algunas declaraciones.";
/** @export */ Blockly.Msg.DATA_LENGTH = "Data Length";  // untranslated
/** @export */ Blockly.Msg.DATA_TYPE = "DataType";  // untranslated
/** @export */ Blockly.Msg.DELETE_ALL_BLOCKS = "¿Eliminar todos los %1 bloques?";
/** @export */ Blockly.Msg.DELETE_BLOCK = "Eliminar bloque";
/** @export */ Blockly.Msg.DELETE_VARIABLE = "Borrar la variable \"%1\"";
/** @export */ Blockly.Msg.DELETE_VARIABLE_CONFIRMATION = "¿Borrar %1 usos de la variable \"%2\"?";
/** @export */ Blockly.Msg.DELETE_X_BLOCKS = "Eliminar %1 bloques";
/** @export */ Blockly.Msg.DEVICE_ID = "DeviceID";  // untranslated
/** @export */ Blockly.Msg.DHT_HELPURL = "https://github.com/adafruit/DHT-sensor-library";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_C = "Temperature C";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_F = "Temperature F";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_H = "Humidity %";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_SENSOR = "Sensor";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_TOOLTIP = "The DHT sensors are made of two parts; a capacitive humidity sensor and a thermistor.";  // untranslated
/** @export */ Blockly.Msg.DHT_READ_TYPE = "Content";  // untranslated
/** @export */ Blockly.Msg.DHT_WARNING = "Need to install the (adafruit) DHT-sensor-library";  // untranslated
/** @export */ Blockly.Msg.DIRECTION = "Direction";  // untranslated
/** @export */ Blockly.Msg.DISABLE_BLOCK = "Desactivar bloque";
/** @export */ Blockly.Msg.DOUBLE = "Double";  // untranslated
/** @export */ Blockly.Msg.DUPLICATE_BLOCK = "Duplicar";
/** @export */ Blockly.Msg.ELEVATION = "Elevation";  // untranslated
/** @export */ Blockly.Msg.EMAIL_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.EMAIL_BODY = "Body";  // untranslated
/** @export */ Blockly.Msg.EMAIL_TITLE = "Title";  // untranslated
/** @export */ Blockly.Msg.ENABLE_BLOCK = "Activar bloque";
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_HELPURL = "https://www.arduino.cc/en/Reference/ClientAvailable";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_TITLE = "Clinet.availalbe";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_AVAILABLE_TOOLTIP = "Returns the number of bytes available for reading (that is; the amount of data that has been written to the client by the server it is connected to).";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_DHCP_TITLE = "Begin (DHCP)";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_DHCP_TOOLTIP = "Using Ethernet.begin(mac) with the proper network setup; the Ethernet shield will automatically obtain an IP address.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_HELPURL = "https://www.arduino.cc/en/Reference/EthernetBegin";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrintln";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TITLE = "Client.Println";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINTLN_TOOLTIP = "Print data; followed by a carriage return and newline; to the server a client is connected to. Prints numbers as a sequence of digits; each an ASCII character (e.g. the number 123 is sent as the three characters '1'; '2'; '3').";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_HELPURL = "https://www.arduino.cc/en/Reference/ClientPrint";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_TITLE = "Client.Print";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CLIENT_PRINT_TOOLTIP = "Print data to the server that a client is connected to. Prints numbers as a sequence of digits; each an ASCII character (e.g. the number 123 is sent as the three characters '1'; '2'; '3').";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnected";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_TITLE = "Clinet.Connected";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECTED_TOOLTIP = "Returns true if the client is connected; false if not.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_HELPURL = "https://www.arduino.cc/en/Reference/ClientConnect";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_TITLE = "Clinet.Connect";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_CONNECT_TOOLTIP = "Connects to a specified IP address and port. The return value indicates success or failure. Also supports DNS lookups when using a domain name.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_TITLE = "GET Request";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_GET_REQUEST_TOOLTIP = "Create GET Request.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_HELPURL = "https://www.arduino.cc/en/Reference/EthernetLocalIP";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_TITLE = "localIP";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_LOCALIP_TOOLTIP = "Retruns the IP address of the Ethernet shield";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_MAC_ADDRESS_TOOLTIP = "Edit Mac Address";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_DATA = "Data";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_TITLE = "POST Request";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_POST_REQUEST_TOOLTIP = "Create POST Request.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_HELPURL = "https://www.arduino.cc/en/Reference/ClientRead";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_TITLE = "Client.Read";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_READ_TOOLTIP = "Read the next byte received from the server the client is connected to (after the last call to read()).";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_HELPURL = "https://www.arduino.cc/en/Reference/ClientStop";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_TITLE = "Client.Stop";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_STOP_TOOLTIP = "Disconnect from the server.";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_1 = "Eternet";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_2 = "Eternet2";  // untranslated
/** @export */ Blockly.Msg.ETHERNET_VERSION_V2 = "Eternet_v2";  // untranslated
/** @export */ Blockly.Msg.EXPAND_ALL = "Expandir bloques";
/** @export */ Blockly.Msg.EXPAND_BLOCK = "Expandir bloque";
/** @export */ Blockly.Msg.EXTERNAL_INPUTS = "Entradas externas";
/** @export */ Blockly.Msg.FALLING = "Falling";  // untranslated
/** @export */ Blockly.Msg.GREEN = "Green";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Button";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_TITLE = "Button";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUTTON_TOOLTIP = "Basic digital input";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Buzzer";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_TITLE = "Piezo Buzzer";  // untranslated
/** @export */ Blockly.Msg.GROVE_BUZZER_TOOLTIP = "Emit a tone when the output is high";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Emitter";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_SEND_TITLE = "Send";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_SEND_TOOLTIP = "Send Data.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_TITLE = "Infrared Emitter";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_EMITTER_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TITLE = "Check Data";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_CHECK_DATA_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_DATA_TITLE = "Received Data";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_DATA_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Infrared_Receiver";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_TOOLTIP = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_INIT_WARNING = "Need to install the (Grove) IRSendRev Library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TITLE = "Receive";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_RECEIVE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_TITLE = "Infrared Receiver";  // untranslated
/** @export */ Blockly.Msg.GROVE_IR_RECEIVER_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_TITLE = "LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LED_TOOLTIP = "LED";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Light_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_TITLE = "Light Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_LIGHT_SENSOR_TOOLTIP = "output Low Value in bright light. High Value is darkness.";  // untranslated
/** @export */ Blockly.Msg.GROVE_PIN = "PIN#";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_.E2.80.93_Relay";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_TITLE = "Relay";  // untranslated
/** @export */ Blockly.Msg.GROVE_RELAY_TOOLTIP = "capable of switching a much higher voltages and currents. The maximum voltage and current that can be controlled by this module upto 250V at 10 amps.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen; and specifies the dimensions (width and height) of the display.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_BEGIN_WARNING = "Need to install the Grove_LCD_RGB_Backlight library.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_CLEAR_TITLE = "Clear";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_LCD_RGB_Backlight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right; the default.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_PRINT_TITLE = "Print";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_TITLE = "LCD RGB";  // untranslated
/** @export */ Blockly.Msg.GROVE_RGB_LCD_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Rotary_Angle_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_TITLE = "Rotary Angle";  // untranslated
/** @export */ Blockly.Msg.GROVE_ROTARY_ANGLE_TOOLTIP = "Analog output between 0 and Vcc";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Sound_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_TITLE = "Sound Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_SOUND_SENSOR_TOOLTIP = "Detect the sound strength of the environment";  // untranslated
/** @export */ Blockly.Msg.GROVE_STAT = "Stat";  // untranslated
/** @export */ Blockly.Msg.GROVE_TEMP_SENSOR_TITLE = "Temporature Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_TEMP_SENSOR_TOOLTIP = "return number of ambient temperature in ℃";  // untranslated
/** @export */ Blockly.Msg.GROVE_TILT_SWITCH_TITLE = "Tilt Switch";  // untranslated
/** @export */ Blockly.Msg.GROVE_TILT_SWITCH_TOOLTIP = "When the switch is level it is open; and when tilted; the switch closes.";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_HELPURL = "http://www.seeedstudio.com/wiki/Grove_-_Starter_Kit_v3#Grove_-_Touch_Sensor";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_TITLE = "Touch";  // untranslated
/** @export */ Blockly.Msg.GROVE_TOUCH_TOOLTIP = "Basic digital input";  // untranslated
/** @export */ Blockly.Msg.HELP = "Ayuda";
/** @export */ Blockly.Msg.I2C_MATRIX_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library.";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_CLEAR = "Clear";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DIAMETER = "Diamater";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DOTS = "Dots";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWCIRCLE = "DrawCircle";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWCOLON = "drawColon";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWLINE = "DrawLine";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWPIXEL = "DrawPixel";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_DRAWRECT = "DrawRect";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_FILLRECT = "FillRect";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_LED_OFF = "Led off";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_LED_ON = "Led on";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_NUM = "Num";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_PRINT = "Print";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETCURSOR = "Cursor";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETROTATION = "Rotation";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTCOLOR = "TextColor";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTSIZE = "TextSize";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_SETTEXTWRAP = "TextWrap";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_TEXT = "text";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_TYPE = "Type";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WRITEDIGITNUM = "writeDigitNum";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_WRITEDISPLAY = "WriteDisplay";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X = "x";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X0 = "x0";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_X1 = "x1";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y = "y";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y0 = "y0";  // untranslated
/** @export */ Blockly.Msg.I2C_MATRIX_Y1 = "y1";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_ADDRESS = "Address";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BEGIN_WARNING = "Need to install the Adafruit-LED-Backpack-Library and the Adafruit-GFX-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BOOLEAN_FALSE = "hidden";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_BOOLEAN_TRUE = "display";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_COLON = "Colon";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_DOTS = "Colon";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_HELPURL = "https://github.com/adafruit/Adafruit-LED-Backpack-Library";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_NUM = "Number";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_PRINT = "Print";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_TITLE = "7 Segment";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WARNING = "Need to Begin blocks";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WRITEDIGITNUM = "WriteDigitNum";  // untranslated
/** @export */ Blockly.Msg.I2C_SEVENSEG_WRITEDISPLAY = "WriteDisplay";  // untranslated
/** @export */ Blockly.Msg.IFTTT_EVENT = "Event";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_TITLE = "Create GET Request URL";  // untranslated
/** @export */ Blockly.Msg.IFTTT_GET_URL_TOOLTIP = "Create GET Request URL of IFTTT.";  // untranslated
/** @export */ Blockly.Msg.IFTTT_KEY = "Key";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE1 = "Value1";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE2 = "Value2";  // untranslated
/** @export */ Blockly.Msg.IFTTT_VALUE3 = "Value3";  // untranslated
/** @export */ Blockly.Msg.INDEX = "Index";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_APPENDTEXT = "add setup()";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_HELPURL = "http://www.arduino.cc/en/Reference/Setup";  // untranslated
/** @export */ Blockly.Msg.INITIALIZES_SETUP_TOOLTIP = "The setup() function is called when a sketch starts.";  // untranslated
/** @export */ Blockly.Msg.INLINE_INPUTS = "Entradas en línea";
/** @export */ Blockly.Msg.INOUT_ANALOGPIN_TEXT = "Analog Pin";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_APPENDTEXT = "AnalogRead PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_HELPURL = "http://arduino.cc/en/Reference/AnalogRead";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_READ_TOOLTIP = "Return value between 0 and 1024.";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_PIN = "AnalogWrite PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_APPENDTEXT_VALUE = "value";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_HELPURL = "http://arduino.cc/en/Reference/AnalogWrite";  // untranslated
/** @export */ Blockly.Msg.INOUT_ANALOG_WRITE_TOOLTIP = "Write analog value between 0 and 255 to a specific Port.";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITALPIN_TEXT = "Digital Pin";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PIN = "DigitalRead PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_APPENDTEXT_PULLUP = "pullup";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_HELPURL = "http://arduino.cc/en/Reference/DigitalRead";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_READ_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_PIN = "DigitalWrite PIN#";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_APPENDTEXT_STAT = "Stat";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_HELPURL = "http://arduino.cc/en/Reference/DigitalWrite";  // untranslated
/** @export */ Blockly.Msg.INOUT_DIGITAL_WRITE_TOOLTIP = "Write digital value to a specific Port.";  // untranslated
/** @export */ Blockly.Msg.INOUT_HIGH = "HIGH";  // untranslated
/** @export */ Blockly.Msg.INOUT_LOW = "LOW";  // untranslated
/** @export */ Blockly.Msg.INOUT_OFF = "OFF";  // untranslated
/** @export */ Blockly.Msg.INOUT_ON = "ON";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_PIN = "Pulsein Pin#";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TIMEOUT = "Timeout";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_APPENDTEXT_TYPE = "Type";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_HELPURL = "http://arduino.cc/en/Reference/pulseIn";  // untranslated
/** @export */ Blockly.Msg.INOUT_PULSEIN_TOOLTIP = "Reads a pulse (either HIGH or LOW) on a pin.";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_DURATION = "duration";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_FREQ = "frequency";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_APPENDTEXT_PIN = "tone Pin#";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_HELPURL = "http://arduino.cc/en/reference/tone";  // untranslated
/** @export */ Blockly.Msg.INOUT_TONE_TOOLTIP = "The pin can be connected to a piezo buzzer or other speaker to play tones.";  // untranslated
/** @export */ Blockly.Msg.INTEGER = "Integer";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_HELPURL = "https://www.arduino.cc/en/Reference/AttachInterrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_TITLE = "Attach Interrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_ATTACH_TOOLTIP = "The first parameter to attachInterrupt is an interrupt number.";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_HELPURL = "https://www.arduino.cc/en/Reference/DetachInterrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_TITLE = "Detach Interrupt";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_DETACH_TOOLTIP = "Turns off the given interrupt.";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_HELPURL = "https://www.arduino.cc/en/Reference/Interrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_HELPURL = "https://www.arduino.cc/en/Reference/NoInterrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_TITLE = "noInterrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_NO_TOOLTIP = "Disables interrupts (you can re-enable them with interrupts()).";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_TITLE = "interrupts";  // untranslated
/** @export */ Blockly.Msg.INTERRUPTS_TOOLTIP = "Re-enables interrupts (after they've been disabled by noInterrupts()). ";  // untranslated
/** @export */ Blockly.Msg.IOS_CANCEL = "Cancelar";
/** @export */ Blockly.Msg.IOS_ERROR = "Error";
/** @export */ Blockly.Msg.IOS_OK = "Aceptar";
/** @export */ Blockly.Msg.IOS_PROCEDURES_ADD_INPUT = "+ Añadir entrada";
/** @export */ Blockly.Msg.IOS_PROCEDURES_ALLOW_STATEMENTS = "Permitir declaraciones";
/** @export */ Blockly.Msg.IOS_PROCEDURES_DUPLICATE_INPUTS_ERROR = "Esta función tiene entradas duplicadas.";
/** @export */ Blockly.Msg.IOS_PROCEDURES_INPUTS = "ENTRADAS";
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_BUTTON = "Añadir";
/** @export */ Blockly.Msg.IOS_VARIABLES_ADD_VARIABLE = "+ Añadir variable";
/** @export */ Blockly.Msg.IOS_VARIABLES_DELETE_BUTTON = "Borrar";
/** @export */ Blockly.Msg.IOS_VARIABLES_EMPTY_NAME_ERROR = "No puedes usar un nombre de variable vacío.";
/** @export */ Blockly.Msg.IOS_VARIABLES_RENAME_BUTTON = "Renombrar";
/** @export */ Blockly.Msg.IOS_VARIABLES_VARIABLE_NAME = "Nombre de la variable";
/** @export */ Blockly.Msg.IP_ADDRESS = "IP Address";  // untranslated
/** @export */ Blockly.Msg.LATITUDE = "Latitude";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalAutoscroll";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_TITLE = "AutoScroll";  // untranslated
/** @export */ Blockly.Msg.LCD_AUTOSCROLL_TOOLTIP = "Turns on automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalBegin";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_TITLE = "begin";  // untranslated
/** @export */ Blockly.Msg.LCD_BEGIN_TOOLTIP = "Initializes the interface to the LCD screen; and specifies the dimensions (width and height) of the display.";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalClear";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_TITLE = "Clear";  // untranslated
/** @export */ Blockly.Msg.LCD_CLEAR_TOOLTIP = "Clears the LCD screen and positions the cursor in the upper-left corner.";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D4 = "D4";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D5 = "D5";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D6 = "D6";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_D7 = "D7";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_ENABLE = "enable";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalConstructor";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_RS = "rs";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_RW = "rw";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_TITLE = "Pin#";  // untranslated
/** @export */ Blockly.Msg.LCD_INIT_TOOLTIP = "Creates a variable of type LiquidCrystal.";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalLeftToRight";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_TITLE = "LeftToRight";  // untranslated
/** @export */ Blockly.Msg.LCD_LEFTTORIGHT_TOOLTIP = "Set the direction for text written to the LCD to left-to-right; the default.";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalNoAutoscroll";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_TITLE = "NoAutoScroll";  // untranslated
/** @export */ Blockly.Msg.LCD_NOAUTOSCROLL_TOOLTIP = "Turns off automatic scrolling of the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalPrint";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_TITLE = "Print";  // untranslated
/** @export */ Blockly.Msg.LCD_PRINT_TOOLTIP = "Prints text to the LCD.";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalRightToLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_TITLE = "RightToLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_RIGHTTOLEFT_TOOLTIP = "Set the direction for text written to the LCD to right-to-left (the default is left-to-right). ";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_HELPURL = "http://www.arduino.cc/en/Reference/LiquidCrystalScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TITLE = "ScrollDisplayLeft";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_LEFT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the left.";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TITLE = "ScrollDisplayRight";  // untranslated
/** @export */ Blockly.Msg.LCD_SCROLL_DISPLAY_RIGHT_TOOLTIP = "Scrolls the contents of the display (text and cursor) one space to the right.";  // untranslated
/** @export */ Blockly.Msg.LCD_SETCURSOR_HELPURL = "http://arduino.cc/en/Reference/LiquidCrystalSetCursor";  // untranslated
/** @export */ Blockly.Msg.LCD_SETCURSOR_TITLE = "setCursor";  // untranslated
/** @export */ Blockly.Msg.LEFT = "Left";  // untranslated
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TITLE = "crear lista vacía";
/** @export */ Blockly.Msg.LISTS_CREATE_EMPTY_TOOLTIP = "Devuelve una lista, de longitud 0, sin ningún dato";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TITLE_ADD = "lista";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_CONTAINER_TOOLTIP = "Agregar, eliminar o reorganizar las secciones para reconfigurar este bloque de lista.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_INPUT_WITH = "crear lista con";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TOOLTIP = "Agregar un elemento a la lista.";
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_TOOLTIP = "Crear una lista con cualquier número de elementos.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FIRST = "primero";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_END = "# del final";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_FROM_START = "#";  // untranslated
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET = "obtener";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_GET_REMOVE = "obtener y eliminar";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_LAST = "último";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_RANDOM = "aleatorio";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_REMOVE = "eliminar";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TAIL = "";  // untranslated
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FIRST = "Devuelve el primer elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_FROM = "Devuelve el elemento en la posición especificada en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_LAST = "Devuelve el último elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_RANDOM = "Devuelve un elemento aleatorio en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST = "Elimina y devuelve el primer elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM = "Elimina y devuelve el elemento en la posición especificada en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST = "Elimina y devuelve el último elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM = "Elimina y devuelve un elemento aleatorio en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST = "Elimina el primer elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM = "Elimina el elemento en la posición especificada en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST = "Elimina el último elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM = "Elimina un elemento aleatorio en una lista.";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_END = "hasta # del final";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_FROM_START = "hasta #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_END_LAST = "hasta el último";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FIRST = "obtener sublista desde el primero";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_END = "obtener sublista desde # del final";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_START_FROM_START = "obtener sublista desde #";
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TAIL = "";  // untranslated
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_TOOLTIP = "Crea una copia de la parte especificada de una lista.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_END_TOOLTIP = "%1 es el último elemento.";
/** @export */ Blockly.Msg.LISTS_INDEX_FROM_START_TOOLTIP = "%1 es el primer elemento.";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_FIRST = "encontrar la primera aparición del elemento";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_HELPURL = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
/** @export */ Blockly.Msg.LISTS_INDEX_OF_LAST = "encontrar la última aparición del elemento";
/** @export */ Blockly.Msg.LISTS_INDEX_OF_TOOLTIP = "Devuelve el índice de la primera/última aparición del elemento en la lista. Devuelve %1 si el elemento no se encuentra.";
/** @export */ Blockly.Msg.LISTS_INLIST = "en la lista";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TITLE = "%1 está vacía";
/** @export */ Blockly.Msg.LISTS_ISEMPTY_TOOLTIP = "Devuelve verdadero si la lista está vacía.";
/** @export */ Blockly.Msg.LISTS_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
/** @export */ Blockly.Msg.LISTS_LENGTH_TITLE = "longitud de %1";
/** @export */ Blockly.Msg.LISTS_LENGTH_TOOLTIP = "Devuelve la longitud de una lista.";
/** @export */ Blockly.Msg.LISTS_REPEAT_HELPURL = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
/** @export */ Blockly.Msg.LISTS_REPEAT_TITLE = "crear lista con el elemento %1 repetido %2 veces";
/** @export */ Blockly.Msg.LISTS_REPEAT_TOOLTIP = "Crea una lista que consta de un valor dado repetido el número de veces especificado.";
/** @export */ Blockly.Msg.LISTS_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
/** @export */ Blockly.Msg.LISTS_REVERSE_MESSAGE0 = "invertir %1";
/** @export */ Blockly.Msg.LISTS_REVERSE_TOOLTIP = "Invertir una copia de una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_HELPURL = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_TO = "como";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INSERT = "insertar en";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_SET = "establecer";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FIRST = "Inserta el elemento al inicio de una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_FROM = "Inserta el elemento en la posición especificada en una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_LAST = "Añade el elemento al final de una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_INSERT_RANDOM = "Inserta el elemento aleatoriamente en una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FIRST = "Establece el primer elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_FROM = "Establece el elemento en la posición especificada en una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_LAST = "Establece el último elemento de una lista.";
/** @export */ Blockly.Msg.LISTS_SET_INDEX_TOOLTIP_SET_RANDOM = "Establece un elemento aleatorio en una lista.";
/** @export */ Blockly.Msg.LISTS_SORT_HELPURL = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_ASCENDING = "ascendente";
/** @export */ Blockly.Msg.LISTS_SORT_ORDER_DESCENDING = "descendente";
/** @export */ Blockly.Msg.LISTS_SORT_TITLE = "orden %1 %2 %3";
/** @export */ Blockly.Msg.LISTS_SORT_TOOLTIP = "Ordenar una copia de una lista.";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_IGNORECASE = "alfabético, ignorar mayúscula/minúscula";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_NUMERIC = "numérico";
/** @export */ Blockly.Msg.LISTS_SORT_TYPE_TEXT = "alfabético";
/** @export */ Blockly.Msg.LISTS_SPLIT_HELPURL = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
/** @export */ Blockly.Msg.LISTS_SPLIT_LIST_FROM_TEXT = "hacer lista a partir de texto";
/** @export */ Blockly.Msg.LISTS_SPLIT_TEXT_FROM_LIST = "hacer texto a partir de lista";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_JOIN = "Unir una lista de textos en un solo texto, separado por un delimitador.";
/** @export */ Blockly.Msg.LISTS_SPLIT_TOOLTIP_SPLIT = "Dividir el texto en una lista de textos, separando en cada delimitador.";
/** @export */ Blockly.Msg.LISTS_SPLIT_WITH_DELIMITER = "con delimitador";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_FALSE = "falso";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_HELPURL = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TOOLTIP = "Devuelve verdadero o falso.";
/** @export */ Blockly.Msg.LOGIC_BOOLEAN_TRUE = "verdadero";
/** @export */ Blockly.Msg.LOGIC_COMPARE_HELPURL = "https://es.wikipedia.org/wiki/Desigualdad_matemática";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_EQ = "Devuelve verdadero si ambas entradas son iguales.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GT = "Devuelve verdadero si la primera entrada es mayor que la segunda entrada.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_GTE = "Devuelve verdadero si la primera entrada es mayor o igual a la segunda entrada.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LT = "Devuelve verdadero si la primera entrada es menor que la segunda entrada.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_LTE = "Devuelve verdadero si la primera entrada es menor que o igual a la segunda entrada.";
/** @export */ Blockly.Msg.LOGIC_COMPARE_TOOLTIP_NEQ = "Devuelve verdadero si ambas entradas son distintas.";
/** @export */ Blockly.Msg.LOGIC_NEGATE_HELPURL = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
/** @export */ Blockly.Msg.LOGIC_NEGATE_TITLE = "no %1";
/** @export */ Blockly.Msg.LOGIC_NEGATE_TOOLTIP = "Devuelve verdadero si la entrada es falsa. Devuelve falso si la entrada es verdadera.";
/** @export */ Blockly.Msg.LOGIC_NULL = "nulo";
/** @export */ Blockly.Msg.LOGIC_NULL_HELPURL = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
/** @export */ Blockly.Msg.LOGIC_NULL_TOOLTIP = "Devuelve nulo.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_AND = "y";
/** @export */ Blockly.Msg.LOGIC_OPERATION_HELPURL = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
/** @export */ Blockly.Msg.LOGIC_OPERATION_OR = "o";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_AND = "Devuelve verdadero si ambas entradas son verdaderas.";
/** @export */ Blockly.Msg.LOGIC_OPERATION_TOOLTIP_OR = "Devuelve verdadero si al menos una de las entradas es verdadera.";
/** @export */ Blockly.Msg.LOGIC_TERNARY_CONDITION = "prueba";
/** @export */ Blockly.Msg.LOGIC_TERNARY_HELPURL = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_FALSE = "si es falso";
/** @export */ Blockly.Msg.LOGIC_TERNARY_IF_TRUE = "si es verdadero";
/** @export */ Blockly.Msg.LOGIC_TERNARY_TOOLTIP = "Comprueba la condición en \"prueba\". Si la condición es verdadera, devuelve el valor \"si es verdadero\"; de lo contrario, devuelve el valor \"si es falso\".";
/** @export */ Blockly.Msg.LONGITUDE = "Longitude";  // untranslated
/** @export */ Blockly.Msg.LOW = "Low";  // untranslated
/** @export */ Blockly.Msg.M2X_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.M2X_BEGIN_TOOLTIP = "Set Config.";  // untranslated
/** @export */ Blockly.Msg.M2X_CUSTOM_LIST_VALUE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_DATE0_TITLE = "Start";  // untranslated
/** @export */ Blockly.Msg.M2X_DATE1_TITLE = "End";  // untranslated
/** @export */ Blockly.Msg.M2X_DELETE_VALUES_TITLE = "Delete Value";  // untranslated
/** @export */ Blockly.Msg.M2X_DELETE_VALUES_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_HELPURL = "https://m2x.att.com/developer/tutorials/arduino";  // untranslated
/** @export */ Blockly.Msg.M2X_KEY = "Access Key";  // untranslated
/** @export */ Blockly.Msg.M2X_LIST_VALUE_TITLE = "Get DataList";  // untranslated
/** @export */ Blockly.Msg.M2X_LIST_VALUE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_LOCATION_NAME = "Location name";  // untranslated
/** @export */ Blockly.Msg.M2X_READ_LOCATION_TITLE = "Read Location";  // untranslated
/** @export */ Blockly.Msg.M2X_READ_LOCATION_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_STREAM_NAME = "Stream Name";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_LOCATION_TITLE = "Update Location";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_LOCATION_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_VALUE_TITLE = "Update";  // untranslated
/** @export */ Blockly.Msg.M2X_UPDATE_VALUE_TOOLTIP = "Update Data to M2X";  // untranslated
/** @export */ Blockly.Msg.MAC_ADDRESS = "Mac Address";  // untranslated
/** @export */ Blockly.Msg.MATH_ADDITION_SYMBOL = "+";  // untranslated
/** @export */ Blockly.Msg.MATH_ARITHMETIC_HELPURL = "https://es.wikipedia.org/wiki/Aritmética";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_ADD = "Devuelve la suma de ambos números.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_DIVIDE = "Devuelve el cociente de ambos números.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MINUS = "Devuelve la diferencia de ambos números.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_MULTIPLY = "Devuelve el producto de ambos números.";
/** @export */ Blockly.Msg.MATH_ARITHMETIC_TOOLTIP_POWER = "Devuelve el primer número elevado a la potencia del segundo.";
/** @export */ Blockly.Msg.MATH_CHANGE_HELPURL = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE = "añadir %2 a %1";
/** @export */ Blockly.Msg.MATH_CHANGE_TOOLTIP = "Añadir un número a la variable «%1».";
/** @export */ Blockly.Msg.MATH_CONSTANT_HELPURL = "https://es.wikipedia.org/wiki/Anexo:Constantes_matemáticas";
/** @export */ Blockly.Msg.MATH_CONSTANT_TOOLTIP = "Devuelve una de las constantes comunes: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) o ∞ (infinito).";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_HELPURL = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TITLE = "limitar %1 entre %2 y %3";
/** @export */ Blockly.Msg.MATH_CONSTRAIN_TOOLTIP = "Limitar un número entre los límites especificados (inclusive).";
/** @export */ Blockly.Msg.MATH_DIVISION_SYMBOL = "÷";  // untranslated
/** @export */ Blockly.Msg.MATH_IS_DIVISIBLE_BY = "es divisible por";
/** @export */ Blockly.Msg.MATH_IS_EVEN = "es par";
/** @export */ Blockly.Msg.MATH_IS_NEGATIVE = "es negativo";
/** @export */ Blockly.Msg.MATH_IS_ODD = "es impar";
/** @export */ Blockly.Msg.MATH_IS_POSITIVE = "es positivo";
/** @export */ Blockly.Msg.MATH_IS_PRIME = "es primo";
/** @export */ Blockly.Msg.MATH_IS_TOOLTIP = "Comprueba si un número es par, impar, primo, entero, positivo, negativo, o si es divisible por un número determinado. Devuelve verdadero o falso.";
/** @export */ Blockly.Msg.MATH_IS_WHOLE = "es entero";
/** @export */ Blockly.Msg.MATH_MODULO_HELPURL = "https://en.wikipedia.org/wiki/Modulo_operation";
/** @export */ Blockly.Msg.MATH_MODULO_TITLE = "resto de %1 ÷ %2";
/** @export */ Blockly.Msg.MATH_MODULO_TOOLTIP = "Devuelve el resto al dividir los dos números.";
/** @export */ Blockly.Msg.MATH_MULTIPLICATION_SYMBOL = "×";  // untranslated
/** @export */ Blockly.Msg.MATH_NUMBER_HELPURL = "https://es.wikipedia.org/wiki/Número";
/** @export */ Blockly.Msg.MATH_NUMBER_TOOLTIP = "Un número.";
/** @export */ Blockly.Msg.MATH_ONLIST_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_AVERAGE = "promedio de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MAX = "máximo de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MEDIAN = "mediana de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MIN = "mínimo de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_MODE = "modas de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_RANDOM = "elemento aleatorio de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_STD_DEV = "desviación estándar de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_OPERATOR_SUM = "suma de la lista";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_AVERAGE = "Devuelve el promedio (media aritmética) de los valores numéricos en la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MAX = "Devuelve el número más grande en la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MEDIAN = "Devuelve la mediana en la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MIN = "Devuelve el número más pequeño en la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_MODE = "Devuelve una lista de los elementos más comunes en la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_RANDOM = "Devuelve un elemento aleatorio de la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_STD_DEV = "Devuelve la desviación estándar de la lista.";
/** @export */ Blockly.Msg.MATH_ONLIST_TOOLTIP_SUM = "Devuelve la suma de todos los números en la lista.";
/** @export */ Blockly.Msg.MATH_POWER_SYMBOL = "^";  // untranslated
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_HELPURL = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TITLE_RANDOM = "fracción aleatoria";
/** @export */ Blockly.Msg.MATH_RANDOM_FLOAT_TOOLTIP = "Devuelve una fracción aleatoria entre 0,0 (ambos inclusive) y 1.0 (exclusivo).";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_HELPURL = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TITLE = "entero aleatorio de %1 a %2";
/** @export */ Blockly.Msg.MATH_RANDOM_INT_TOOLTIP = "Devuelve un entero aleatorio entre los dos límites especificados, inclusive.";
/** @export */ Blockly.Msg.MATH_ROUND_HELPURL = "https://es.wikipedia.org/wiki/Redondeo";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUND = "redondear";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDDOWN = "redondear a la baja";
/** @export */ Blockly.Msg.MATH_ROUND_OPERATOR_ROUNDUP = "redondear al alza";
/** @export */ Blockly.Msg.MATH_ROUND_TOOLTIP = "Redondear un número al alza o a la baja.";
/** @export */ Blockly.Msg.MATH_SINGLE_HELPURL = "https://es.wikipedia.org/wiki/Ra%C3%ADz_cuadrada";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ABSOLUTE = "absoluto";
/** @export */ Blockly.Msg.MATH_SINGLE_OP_ROOT = "raíz cuadrada";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ABS = "Devuelve el valor absoluto de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_EXP = "Devuelve e a la potencia de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LN = "Devuelve el logaritmo natural de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_LOG10 = "Devuelve el logaritmo base 10 de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_NEG = "Devuelve la negación de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_POW10 = "Devuelve 10 a la potencia de un número.";
/** @export */ Blockly.Msg.MATH_SINGLE_TOOLTIP_ROOT = "Devuelve la raíz cuadrada de un número.";
/** @export */ Blockly.Msg.MATH_SUBTRACTION_SYMBOL = "-";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ACOS = "acos";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ASIN = "asin";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_ATAN = "atan";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_COS = "cos";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_HELPURL = "https://es.wikipedia.org/wiki/Función_trigonométrica";
/** @export */ Blockly.Msg.MATH_TRIG_SIN = "sin";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_TAN = "tan";  // untranslated
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ACOS = "Devuelve el arcocoseno de un número.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ASIN = "Devuelve el arcoseno de un número.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_ATAN = "Devuelve el arcotangente de un número.";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_COS = "Devuelve el coseno de un grado (no radián).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_SIN = "Devuelve el seno de un grado (no radián).";
/** @export */ Blockly.Msg.MATH_TRIG_TOOLTIP_TAN = "Devuelve la tangente de un grado (no radián).";
/** @export */ Blockly.Msg.MODE = "Mode";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_TITLE = "Begin";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_TOOLTIP = "initialize the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_BEGIN_WARNING = "Need to install the Adafruit_MPR121 library.";  // untranslated
/** @export */ Blockly.Msg.MPR121_HELPURL = "https://learn.adafruit.com/adafruit-mpr121-12-key-capacitive-touch-sensor-breakout-tutorial/wiring#download-adafruit-mpr121";  // untranslated
/** @export */ Blockly.Msg.MPR121_POSITION = "Position";  // untranslated
/** @export */ Blockly.Msg.MPR121_RELEASED_TITLE = "Released";  // untranslated
/** @export */ Blockly.Msg.MPR121_RELEASED_TOOLTIP = "relesed the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_RESET_TITLE = "Reset";  // untranslated
/** @export */ Blockly.Msg.MPR121_RESET_TOOLTIP = "Reset the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_TOUCHED_TITLE = "Touched";  // untranslated
/** @export */ Blockly.Msg.MPR121_TOUCHED_TOOLTIP = "touched the sensor";  // untranslated
/** @export */ Blockly.Msg.MPR121_VALUE_TITLE = "Capacitance Value";  // untranslated
/** @export */ Blockly.Msg.MPR121_VALUE_TOOLTIP = "value of capacitance";  // untranslated
/** @export */ Blockly.Msg.MPR121_WARNING = "Need to Begin block.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_NUM = "LED Num";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_SETTING = "Init";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values; from 0;0;0 up to 255;255;255";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SHOW = "Show";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
/** @export */ Blockly.Msg.NEOPIXEL_WARNING = "Need to Begin Block.";  // untranslated
/** @export */ Blockly.Msg.NEW_VARIABLE = "Crear variable…";
/** @export */ Blockly.Msg.NEW_VARIABLE_TITLE = "Nombre de variable nueva:";
/** @export */ Blockly.Msg.OFF = "Off";  // untranslated
/** @export */ Blockly.Msg.ON = "On";  // untranslated
/** @export */ Blockly.Msg.ORDINAL_NUMBER_SUFFIX = "";  // untranslated
/** @export */ Blockly.Msg.PIN = "Pin";  // untranslated
/** @export */ Blockly.Msg.PORT = "Port";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_ALLOW_STATEMENTS = "permitir declaraciones";
/** @export */ Blockly.Msg.PROCEDURES_BEFORE_PARAMS = "con:";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_HELPURL = "https://es.wikipedia.org/wiki/Subrutina";
/** @export */ Blockly.Msg.PROCEDURES_CALLNORETURN_TOOLTIP = "Ejecuta la función definida por el usuario '%1'.";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_HELPURL = "https://es.wikipedia.org/wiki/Subrutina";
/** @export */ Blockly.Msg.PROCEDURES_CALLRETURN_TOOLTIP = "Ejecuta la función definida por el usuario '%1' y usa su salida.";
/** @export */ Blockly.Msg.PROCEDURES_CALL_BEFORE_PARAMS = "con:";
/** @export */ Blockly.Msg.PROCEDURES_CREATE_DO = "Crear '%1'";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT = "Describe esta función...";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_DO = "";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE = "hacer algo";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE = "para";
/** @export */ Blockly.Msg.PROCEDURES_DEFNORETURN_TOOLTIP = "Crea una función sin salida.";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_HELPURL = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_RETURN = "devuelve";
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TOOLTIP = "Crea una función con una salida.";
/** @export */ Blockly.Msg.PROCEDURES_DEF_DUPLICATE_WARNING = "Advertencia: Esta función tiene parámetros duplicados.";
/** @export */ Blockly.Msg.PROCEDURES_HIGHLIGHT_DEF = "Destacar definición de la función";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_HELPURL = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_TOOLTIP = "Si un valor es verdadero, entonces devuelve un segundo valor.";
/** @export */ Blockly.Msg.PROCEDURES_IFRETURN_WARNING = "Advertencia: Este bloque solo puede ser utilizado dentro de la definición de una función.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TITLE = "nombre de entrada:";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORARG_TOOLTIP = "Añadir una entrada a la función.";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TITLE = "entradas";
/** @export */ Blockly.Msg.PROCEDURES_MUTATORCONTAINER_TOOLTIP = "Añadir, eliminar o reordenar entradas para esta función.";
/** @export */ Blockly.Msg.RED = "Red";  // untranslated
/** @export */ Blockly.Msg.REDO = "Rehacer";
/** @export */ Blockly.Msg.REMOVE_COMMENT = "Eliminar comentario";
/** @export */ Blockly.Msg.RENAME_VARIABLE = "Renombrar la variable…";
/** @export */ Blockly.Msg.RENAME_VARIABLE_TITLE = "Renombrar todas las variables «%1» a:";
/** @export */ Blockly.Msg.RGBLED_BEGIN_BRIGHTNESS = "Brightness";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_NUM = "LED Num";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_PIN = "Pin#";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_SETTING = "Init";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_TOOLTIP = "This initializes the NeoPixel library.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_BEGIN_WARNING = "Need to install the Adafruit_NeoPixel Library.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_B = "B";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_G = "G";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_R = "R";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.RGBLED_CUSTOM_SETPIXELCOLOR_TOOLTIP = "pixels.Color takes RGB values; from 0;0;0 up to 255;255;255";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SETPIXELCOLOR_TARGET = "Target";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SETPIXELCOLOR_TOOLTIP = "Set pixels.Color.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW = "Show";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW_HELPURL = "https://github.com/adafruit/Adafruit_NeoPixel";  // untranslated
/** @export */ Blockly.Msg.RGBLED_SHOW_TOOLTIP = "This sends the updated pixel color to the hardware.";  // untranslated
/** @export */ Blockly.Msg.RGBLED_WARNING = "Need to Begin Block.";  // untranslated
/** @export */ Blockly.Msg.RIGHT = "Right";  // untranslated
/** @export */ Blockly.Msg.RISING = "Rising";  // untranslated
/** @export */ Blockly.Msg.ROW = "Row";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_APPENDTEXT = "Serial Available";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_HELPURL = "http://www.arduino.cc/en/Serial/available";  // untranslated
/** @export */ Blockly.Msg.SERIAL_AVAILABLE_TOOLTIP = "Get the number of bytes (characters) available for reading from the serial port.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER = "Byte Code of Number";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT1 = "Byte code of";  // untranslated
/** @export */ Blockly.Msg.SERIAL_BYTE_NUMBER_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_APPENDTEXT = "Serial Println";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_HELPURL = "http://www.arduino.cc/en/Serial/Println";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINTLN_TOOLTIP = "Prints data to the serial port as human-readable ASCII text followed by a carriage return character and a newline characte.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_APPENDTEXT = "Serial Print";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_HELPURL = "http://www.arduino.cc/en/Serial/Print";  // untranslated
/** @export */ Blockly.Msg.SERIAL_PRINT_TOOLTIP = "Prints data to the console/serial port as human-readable ASCII text.";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_APPENDTEXT = "Serial Read";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_HELPURL = "http://www.arduino.cc/en/Serial/Read";  // untranslated
/** @export */ Blockly.Msg.SERIAL_READ_TOOLTIP = "the first byte of incoming serial data available (or -1 if no data is available).";  // untranslated
/** @export */ Blockly.Msg.SERVER = "Server";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_TEXT1 = "Angle";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_US_TEXT1 = "Angle(uS)";  // untranslated
/** @export */ Blockly.Msg.SERVO_ANGLE_US_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttached";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TEXT1 = "Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TEXT2 = "Attached?";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACHED_TOOLTIP = "Check whether the Servo variable is attached to a pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoAttach";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MAX_TEXT1 = "Max";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MAX_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MIN_TEXT1 = "Min";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_MIN_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TEXT1 = "Attach Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_ATTACH_TOOLTIP = "Attach the Servo variable to a pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_HELPURL = "http://www.arduino.cc/en/Reference/ServoDetach";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TEXT1 = "Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TEXT2 = "Detach";  // untranslated
/** @export */ Blockly.Msg.SERVO_DETACH_TOOLTIP = "Detach the Servo variable from its pin.";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_HELPURL = "http://www.arduino.cc/en/Reference/ServoRead";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TEXT1 = "Read Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TEXT2 = "Current Angle";  // untranslated
/** @export */ Blockly.Msg.SERVO_READ_TOOLTIP = "Read the current angle of the servo (the value passed to the last call to write()).";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_HELPURL = "http://www.arduino.cc/en/Reference/ServoWrite";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TEXT1 = "Write Pin";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TEXT2 = "";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_TOOLTIP = "Writes a value to the servo; controlling the shaft accordingly.";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_US_HELPURL = "http://www.arduino.cc/en/Reference/ServoWriteMicroseconds";  // untranslated
/** @export */ Blockly.Msg.SERVO_WRITE_US_TOOLTIP = "Writes a value in microSeconds(uS) to the servo; controlling the shaft accordingly.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_BACKWARD = "Backward";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_CONTROL = "Control";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_DRIVE_TITLE = "Drive";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_DRIVE_TOOLTIP = "All purpose drive call. Calls leftMotor and rightMotor directly.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFTTOOLTIP = "Disables the left motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_LEFT_TITLE = "FastStop(left)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TITLE = "FastStop(right)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_RIGHT_TOOLTIP = "Disables the right motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_TITLE = "FastStop";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FASTSTOP_TOOLTIP = "Disables the motor quicker. This is considered possibly bad for the motor chip so use at your discretion.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_FORWARD = "Forward";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_HELPURL = "http://www.seeedstudio.com/wiki/Shield_Bot_V1.2";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_LEFT_SPEED = "Left";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOTOR = "Motor";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOTOR_TOOLTIP = "Enables the right or left motor; negative for backwards; positive for forwards.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOVE_TITLE = "Move";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_MOVE_TOOLTIP = "Move Carbot.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_READ_SENSOR_TITLE = "Read Sensor";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_READ_SENSOR_TOOLTIP = "Reads any of the 5 light sensors on board.";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_RIGHT_SPEED = "Right";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_LR_TOOLTIP = "Write a max speed to the left and right motor. Between 0(basically off) and 255(full speed)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TITLE = "MotorSpeed";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_SETMAXSPEED_TOOLTIP = "Set max speed of two motors. Between 0(basically off) and 255(full speed)";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOP = "Stop";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOPLEFT = "StopLeft";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_STOPRIGHT = "StopRight";  // untranslated
/** @export */ Blockly.Msg.SHIELD_BOT_WARNING = "Need to install Shield Bot 1.2 library";  // untranslated
/** @export */ Blockly.Msg.STRING = "String";  // untranslated
/** @export */ Blockly.Msg.TEXT = "Text";  // untranslated
/** @export */ Blockly.Msg.TEXT_APPEND_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
/** @export */ Blockly.Msg.TEXT_APPEND_TITLE = "a %1 añade el texto %2";
/** @export */ Blockly.Msg.TEXT_APPEND_TOOLTIP = "Añadir texto a la variable '%1'.";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_HELPURL = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_LOWERCASE = "a minúsculas";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_TITLECASE = "a Mayúsculas Cada Palabra";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_OPERATOR_UPPERCASE = "a MAYÚSCULAS";
/** @export */ Blockly.Msg.TEXT_CHANGECASE_TOOLTIP = "Devuelve una copia del texto en un tamaño diferente.";
/** @export */ Blockly.Msg.TEXT_CHARAT_FIRST = "obtener la primera letra";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_END = "obtener la letra # del final";
/** @export */ Blockly.Msg.TEXT_CHARAT_FROM_START = "obtener la letra #";
/** @export */ Blockly.Msg.TEXT_CHARAT_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_CHARAT_LAST = "obtener la última letra";
/** @export */ Blockly.Msg.TEXT_CHARAT_RANDOM = "obtener letra aleatoria";
/** @export */ Blockly.Msg.TEXT_CHARAT_TAIL = "";  // untranslated
/** @export */ Blockly.Msg.TEXT_CHARAT_TITLE = "en el texto %1 %2";
/** @export */ Blockly.Msg.TEXT_CHARAT_TOOLTIP = "Devuelve la letra en la posición especificada.";
/** @export */ Blockly.Msg.TEXT_COUNT_HELPURL = "https://github.com/google/blockly/wiki/Text#counting-substrings";
/** @export */ Blockly.Msg.TEXT_COUNT_MESSAGE0 = "contar %1 en %2";
/** @export */ Blockly.Msg.TEXT_COUNT_TOOLTIP = "Cuantas veces aparece un texto dentro de otro texto.";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TOOLTIP = "Agregar un elemento al texto.";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TITLE_JOIN = "unir";
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_TOOLTIP = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque de texto.";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_END = "hasta la letra # del final";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_FROM_START = "hasta la letra #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_END_LAST = "hasta la última letra";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_HELPURL = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_INPUT_IN_TEXT = "en el texto";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FIRST = "obtener subcadena desde la primera letra";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_END = "obtener subcadena desde la letra # del final";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_START_FROM_START = "obtener subcadena desde la letra #";
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TAIL = "";  // untranslated
/** @export */ Blockly.Msg.TEXT_GET_SUBSTRING_TOOLTIP = "Devuelve una porción determinada del texto.";
/** @export */ Blockly.Msg.TEXT_INDEXOF_HELPURL = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_FIRST = "encontrar la primera aparición del texto";
/** @export */ Blockly.Msg.TEXT_INDEXOF_OPERATOR_LAST = "encontrar la última aparición del texto";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TITLE = "en el texto %1 %2 %3";
/** @export */ Blockly.Msg.TEXT_INDEXOF_TOOLTIP = "Devuelve el índice de la primera/última aparición del primer texto en el segundo texto. Devuelve %1 si el texto no se encuentra.";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_HELPURL = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TITLE = "%1 está vacío";
/** @export */ Blockly.Msg.TEXT_ISEMPTY_TOOLTIP = "Devuelve verdadero si el texto proporcionado está vacío.";
/** @export */ Blockly.Msg.TEXT_JOIN_HELPURL = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
/** @export */ Blockly.Msg.TEXT_JOIN_TITLE_CREATEWITH = "crear texto con";
/** @export */ Blockly.Msg.TEXT_JOIN_TOOLTIP = "Crear un fragmento de texto al unir cualquier número de elementos.";
/** @export */ Blockly.Msg.TEXT_LENGTH_HELPURL = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
/** @export */ Blockly.Msg.TEXT_LENGTH_TITLE = "longitud de %1";
/** @export */ Blockly.Msg.TEXT_LENGTH_TOOLTIP = "Devuelve el número de letras (espacios incluidos) del texto proporcionado.";
/** @export */ Blockly.Msg.TEXT_PRINT_HELPURL = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
/** @export */ Blockly.Msg.TEXT_PRINT_TITLE = "imprimir %1";
/** @export */ Blockly.Msg.TEXT_PRINT_TOOLTIP = "Imprimir el texto, número u otro valor especificado.";
/** @export */ Blockly.Msg.TEXT_PROMPT_HELPURL = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_NUMBER = "Solicitar al usuario un número.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TOOLTIP_TEXT = "Solicitar al usuario un texto.";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_NUMBER = "solicitar número con el mensaje";
/** @export */ Blockly.Msg.TEXT_PROMPT_TYPE_TEXT = "solicitar texto con el mensaje";
/** @export */ Blockly.Msg.TEXT_REPLACE_HELPURL = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
/** @export */ Blockly.Msg.TEXT_REPLACE_MESSAGE0 = "reemplazar %1 con %2 en %3";
/** @export */ Blockly.Msg.TEXT_REPLACE_TOOLTIP = "Reemplazar todas las veces que un texto dentro de otro texto.";
/** @export */ Blockly.Msg.TEXT_REVERSE_HELPURL = "https://github.com/google/blockly/wiki/Text#reversing-text";
/** @export */ Blockly.Msg.TEXT_REVERSE_MESSAGE0 = "invertir %1";
/** @export */ Blockly.Msg.TEXT_REVERSE_TOOLTIP = "Invierte el orden de los caracteres en el texto.";
/** @export */ Blockly.Msg.TEXT_TEXT_HELPURL = "https://es.wikipedia.org/wiki/Cadena_de_caracteres";
/** @export */ Blockly.Msg.TEXT_TEXT_TOOLTIP = "Una letra, palabra o línea de texto.";
/** @export */ Blockly.Msg.TEXT_TRIM_HELPURL = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_BOTH = "quitar espacios de ambos lados de";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_LEFT = "quitar espacios iniciales de";
/** @export */ Blockly.Msg.TEXT_TRIM_OPERATOR_RIGHT = "quitar espacios finales de";
/** @export */ Blockly.Msg.TEXT_TRIM_TOOLTIP = "Devuelve una copia del texto sin los espacios de uno o ambos extremos.";
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_APPENDTEXT = "delayMicroseconds";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_HELPURL = "http://arduino.cc/en/Reference/DelayMicroseconds";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAYMICROSECONDS_TOOLTIP = "Pauses the program for the amount of time (in microseconds) specified as parameter.";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_APPENDTEXT = "delay";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_HELPURL = "http://arduino.cc/en/Reference/delay";  // untranslated
/** @export */ Blockly.Msg.TIMES_DELAY_TOOLTIP = "Delay specific time";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_APPENDTEXT = "micros";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_HELPURL = "hhttp://arduino.cc/en/Reference/Micros";  // untranslated
/** @export */ Blockly.Msg.TIMES_MICROS_TOOLTIP = "Returns the number of microseconds since the Arduino board began running the current program.";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_APPENDTEXT = "millis";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_HELPURL = "hhttp://arduino.cc/en/Reference/Millis";  // untranslated
/** @export */ Blockly.Msg.TIMES_MILLIS_TOOLTIP = "Returns the number of milliseconds since the Arduino board began running the current program.";  // untranslated
/** @export */ Blockly.Msg.TODAY = "Hoy";
/** @export */ Blockly.Msg.ULTRASONIC_DISTANCE_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_DISTANCE_TITLE = "Distance";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_HELPURL = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_TITLE = "MaxRange";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_MAXRANGE_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_ECHO = "Echo";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_RESET = "Reset";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TITLE = "Pin#";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TOOLTIP = "";  // untranslated
/** @export */ Blockly.Msg.ULTRASONIC_SETTING_TRIG = "Trig";  // untranslated
/** @export */ Blockly.Msg.UNDO = "Deshacer";
/** @export */ Blockly.Msg.URL = "URL";  // untranslated
/** @export */ Blockly.Msg.VALUE = "Value";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_DEFAULT_NAME = "elemento";
/** @export */ Blockly.Msg.VARIABLES_GET_CREATE_SET = "Crear 'establecer %1'";
/** @export */ Blockly.Msg.VARIABLES_GET_HELPURL = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_GET_TOOLTIP = "Devuelve el valor de esta variable.";
/** @export */ Blockly.Msg.VARIABLES_SET = "establecer %1 a %2";
/** @export */ Blockly.Msg.VARIABLES_SET_CREATE_GET = "Crear 'obtener %1'";
/** @export */ Blockly.Msg.VARIABLES_SET_HELPURL = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
/** @export */ Blockly.Msg.VARIABLES_SET_TOOLTIP = "Establece esta variable para que sea igual a la entrada.";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS = "Ya existe una variable llamada \"%1\".";
/** @export */ Blockly.Msg.VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE = "Ya existe una variable nombrada \"%1\" para otra variable del tipo \"%2\".";
/** @export */ Blockly.Msg.YELLOW = "Yellow";  // untranslated
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_TITLE = Blockly.Msg.PROCEDURES_DEFNORETURN_TITLE;
/** @export */ Blockly.Msg.CONTROLS_IF_IF_TITLE_IF = Blockly.Msg.CONTROLS_IF_MSG_IF;
/** @export */ Blockly.Msg.CONTROLS_WHILEUNTIL_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_MSG_THEN = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSE_TITLE_ELSE = Blockly.Msg.CONTROLS_IF_MSG_ELSE;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_PROCEDURE = Blockly.Msg.PROCEDURES_DEFNORETURN_PROCEDURE;
/** @export */ Blockly.Msg.LISTS_GET_SUBLIST_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.MATH_CHANGE_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_DO = Blockly.Msg.PROCEDURES_DEFNORETURN_DO;
/** @export */ Blockly.Msg.CONTROLS_IF_ELSEIF_TITLE_ELSEIF = Blockly.Msg.CONTROLS_IF_MSG_ELSEIF;
/** @export */ Blockly.Msg.LISTS_GET_INDEX_HELPURL = Blockly.Msg.LISTS_INDEX_OF_HELPURL;
/** @export */ Blockly.Msg.CONTROLS_FOREACH_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_SET_INDEX_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.CONTROLS_FOR_INPUT_DO = Blockly.Msg.CONTROLS_REPEAT_INPUT_DO;
/** @export */ Blockly.Msg.LISTS_CREATE_WITH_ITEM_TITLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_APPEND_VARIABLE = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.TEXT_CREATE_JOIN_ITEM_TITLE_ITEM = Blockly.Msg.VARIABLES_DEFAULT_NAME;
/** @export */ Blockly.Msg.LISTS_INDEX_OF_INPUT_IN_LIST = Blockly.Msg.LISTS_INLIST;
/** @export */ Blockly.Msg.PROCEDURES_DEFRETURN_COMMENT = Blockly.Msg.PROCEDURES_DEFNORETURN_COMMENT;

/** @export */ Blockly.Msg.MATH_HUE = "230";
/** @export */ Blockly.Msg.VARIABLES_HUE = "330";
/** @export */ Blockly.Msg.SERVO_HUE = "215";
/** @export */ Blockly.Msg.GROVE_HUE = "215";
/** @export */ Blockly.Msg.RGBLED_HUE = "215";
/** @export */ Blockly.Msg.MPR121_HUE = "215";
/** @export */ Blockly.Msg.INITIALIZES_HUE = "230";
/** @export */ Blockly.Msg.BLYNK_HUE = "215";
/** @export */ Blockly.Msg.M2X_HUE = "215";
/** @export */ Blockly.Msg.IFTTT_HUE = "215";
/** @export */ Blockly.Msg.INTERRUPTS_HUE = "190";
/** @export */ Blockly.Msg.NEOPIXEL_HUE = "215";
/** @export */ Blockly.Msg.LOOPS_HUE = "120";
/** @export */ Blockly.Msg.SERIAL_HUE = "200";
/** @export */ Blockly.Msg.ROBOT_HUE = "215";
/** @export */ Blockly.Msg.ULTRASONIC_HUE = "215";
/** @export */ Blockly.Msg.TEXTS_HUE = "160";
/** @export */ Blockly.Msg.GROVE_OUTPUT_HUE = "215";
/** @export */ Blockly.Msg.PROCEDURES_HUE = "290";
/** @export */ Blockly.Msg.COLOUR_HUE = "20";
/** @export */ Blockly.Msg.OTHERS_HUE = "215";
/** @export */ Blockly.Msg.TIMES_HUE = "90";
/** @export */ Blockly.Msg.LISTS_HUE = "260";
/** @export */ Blockly.Msg.LOGIC_HUE = "210";
/** @export */ Blockly.Msg.I2C_MATRIX_HUE = "215";
/** @export */ Blockly.Msg.AEROBOT_HUE = "215";
/** @export */ Blockly.Msg.SHIELD_BOT_HUE = "215";
/** @export */ Blockly.Msg.ADAFRUIT_HUE = "215";
/** @export */ Blockly.Msg.I2C_SEVENSEG_HUE = "215";
/** @export */ Blockly.Msg.GROVE_INPUT_HUE = "215";
/** @export */ Blockly.Msg.ETHERNET_HUE = "215";
/** @export */ Blockly.Msg.INOUT_HUE = "230";